[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.forms",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "AuthenticationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "AuthenticationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "PasswordInput",
        "importPath": "django.forms.widgets",
        "description": "django.forms.widgets",
        "isExtraImport": true,
        "detail": "django.forms.widgets",
        "documentation": {}
    },
    {
        "label": "TextInput",
        "importPath": "django.forms.widgets",
        "description": "django.forms.widgets",
        "isExtraImport": true,
        "detail": "django.forms.widgets",
        "documentation": {}
    },
    {
        "label": "inlineformset_factory",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "inlineformset_factory",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "pre_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "count",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "serialize",
        "importPath": "django.core.serializers",
        "description": "django.core.serializers",
        "isExtraImport": true,
        "detail": "django.core.serializers",
        "documentation": {}
    },
    {
        "label": "parse_date",
        "importPath": "django.utils.dateparse",
        "description": "django.utils.dateparse",
        "isExtraImport": true,
        "detail": "django.utils.dateparse",
        "documentation": {}
    },
    {
        "label": "parse_time",
        "importPath": "django.utils.dateparse",
        "description": "django.utils.dateparse",
        "isExtraImport": true,
        "detail": "django.utils.dateparse",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "main_crm.asgi",
        "description": "main_crm.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "main_crm.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-if1@0&*6+mmz0qs2$dxk^53q__d*9$6q(70id#e(f3*xjx&&#o'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-if1@0&*6+mmz0qs2$dxk^53q__d*9$6q(70id#e(f3*xjx&&#o'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'webapp.apps.WebappConfig',",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'webapp.apps.WebappConfig',\n    'crispy_forms',\n    'crispy_bootstrap4',",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "CRISPY_TEMPLATE_PACK",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "CRISPY_TEMPLATE_PACK = 'bootstrap4'\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'main_crm.urls'",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "ROOT_URLCONF = 'main_crm.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "WSGI_APPLICATION = 'main_crm.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_URL = '/static/'\n# إذا كنت تستخدم مجلد static في التطبيق\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'templates/static')]",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_URL = '/static/'\n# إذا كنت تستخدم مجلد static في التطبيق\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'templates/static')]\n# Default primary key field type",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_URL = '/static/'\n# إذا كنت تستخدم مجلد static في التطبيق\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'templates/static')]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_URL = '/static/'\n# إذا كنت تستخدم مجلد static في التطبيق\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'templates/static')]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATIC_URL = '/static/'\n# إذا كنت تستخدم مجلد static في التطبيق\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'templates/static')]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "STATIC_URL = '/static/'\n# إذا كنت تستخدم مجلد static في التطبيق\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'templates/static')]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "STATICFILES_DIRS = [os.path.join(BASE_DIR, 'templates/static')]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "main_crm.urls",
        "description": "main_crm.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('',include('webapp.urls') )\n]",
        "detail": "main_crm.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "main_crm.wsgi",
        "description": "main_crm.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "main_crm.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0001_initial",
        "description": "webapp.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='appointment',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=300)),",
        "detail": "webapp.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0002_reserve_delete_appointment",
        "description": "webapp.migrations.0002_reserve_delete_appointment",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='reserve',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=300)),",
        "detail": "webapp.migrations.0002_reserve_delete_appointment",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0003_delete_reserve",
        "description": "webapp.migrations.0003_delete_reserve",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0002_reserve_delete_appointment'),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name='reserve',\n        ),\n    ]",
        "detail": "webapp.migrations.0003_delete_reserve",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0004_reserve",
        "description": "webapp.migrations.0004_reserve",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0003_delete_reserve'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Reserve',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=300)),",
        "detail": "webapp.migrations.0004_reserve",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0005_alter_reserve_options",
        "description": "webapp.migrations.0005_alter_reserve_options",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0004_reserve'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='reserve',\n            options={'ordering': ['-create_at']},\n        ),\n    ]",
        "detail": "webapp.migrations.0005_alter_reserve_options",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0006_inventory",
        "description": "webapp.migrations.0006_inventory",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0005_alter_reserve_options'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Inventory',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('item_name', models.CharField(max_length=300)),",
        "detail": "webapp.migrations.0006_inventory",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0007_delete_inventory",
        "description": "webapp.migrations.0007_delete_inventory",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0006_inventory'),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name='Inventory',\n        ),\n    ]",
        "detail": "webapp.migrations.0007_delete_inventory",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0008_inventory",
        "description": "webapp.migrations.0008_inventory",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0007_delete_inventory'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Inventory',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('item_name', models.CharField(max_length=300)),",
        "detail": "webapp.migrations.0008_inventory",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0009_alter_inventory_options",
        "description": "webapp.migrations.0009_alter_inventory_options",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0008_inventory'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='inventory',\n            options={'ordering': ['-create_at']},\n        ),\n    ]",
        "detail": "webapp.migrations.0009_alter_inventory_options",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0010_reserve_branch_reserve_status",
        "description": "webapp.migrations.0010_reserve_branch_reserve_status",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0009_alter_inventory_options'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='reserve',\n            name='Branch',\n            field=models.CharField(choices=[('EL-Mohandsen', 'EL-Mohandsen'), ('5th sattelment', '5th sattelment'), ('Naser-city', 'Naser-city')], default='Branch', max_length=50),\n        ),",
        "detail": "webapp.migrations.0010_reserve_branch_reserve_status",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0011_medical_history",
        "description": "webapp.migrations.0011_medical_history",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0010_reserve_branch_reserve_status'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Medical_History',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('medical_notes', models.CharField(max_length=1000)),",
        "detail": "webapp.migrations.0011_medical_history",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0012_alter_reserve_name",
        "description": "webapp.migrations.0012_alter_reserve_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0011_medical_history'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='reserve',\n            name='name',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='webapp.patient'),\n        ),",
        "detail": "webapp.migrations.0012_alter_reserve_name",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0013_delete_inventory",
        "description": "webapp.migrations.0013_delete_inventory",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0012_alter_reserve_name'),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name='Inventory',\n        ),\n    ]",
        "detail": "webapp.migrations.0013_delete_inventory",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0014_companies_inventory",
        "description": "webapp.migrations.0014_companies_inventory",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0013_delete_inventory'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Companies',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('company_name', models.CharField(max_length=255)),",
        "detail": "webapp.migrations.0014_companies_inventory",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0015_remove_inventory_company_source_delete_companies_and_more",
        "description": "webapp.migrations.0015_remove_inventory_company_source_delete_companies_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0014_companies_inventory'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='inventory',\n            name='company_source',\n        ),\n        migrations.DeleteModel(",
        "detail": "webapp.migrations.0015_remove_inventory_company_source_delete_companies_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0016_companies_inventory_invoice_payment",
        "description": "webapp.migrations.0016_companies_inventory_invoice_payment",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0015_remove_inventory_company_source_delete_companies_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Companies',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('company_name', models.CharField(max_length=255)),",
        "detail": "webapp.migrations.0016_companies_inventory_invoice_payment",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0017_delete_payment",
        "description": "webapp.migrations.0017_delete_payment",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0016_companies_inventory_invoice_payment'),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name='Payment',\n        ),\n    ]",
        "detail": "webapp.migrations.0017_delete_payment",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0018_payment",
        "description": "webapp.migrations.0018_payment",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0017_delete_payment'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Payment',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('patient', models.CharField(max_length=300)),",
        "detail": "webapp.migrations.0018_payment",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0019_remove_reserve_birth",
        "description": "webapp.migrations.0019_remove_reserve_birth",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0018_payment'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='reserve',\n            name='birth',\n        ),\n    ]",
        "detail": "webapp.migrations.0019_remove_reserve_birth",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0020_alter_patient_date_of_birth",
        "description": "webapp.migrations.0020_alter_patient_date_of_birth",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0019_remove_reserve_birth'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='patient',\n            name='date_of_birth',\n            field=models.DateField(blank=True, null=True),\n        ),",
        "detail": "webapp.migrations.0020_alter_patient_date_of_birth",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0021_service_remove_payment_payment_date_and_more",
        "description": "webapp.migrations.0021_service_remove_payment_payment_date_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0020_alter_patient_date_of_birth'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Service',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),",
        "detail": "webapp.migrations.0021_service_remove_payment_payment_date_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0022_reserve_service",
        "description": "webapp.migrations.0022_reserve_service",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0021_service_remove_payment_payment_date_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='reserve',\n            name='service',\n            field=models.CharField(choices=[('Service', 'Service'), ('Consultation', 'Consultation'), ('Retouch', 'Retouch')], default='Service type', max_length=50),\n        ),",
        "detail": "webapp.migrations.0022_reserve_service",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0023_remove_inventory_company_source_and_more",
        "description": "webapp.migrations.0023_remove_inventory_company_source_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0022_reserve_service'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='inventory',\n            name='company_source',\n        ),\n        migrations.RemoveField(",
        "detail": "webapp.migrations.0023_remove_inventory_company_source_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0024_companies_service_inventory_invoice_medical_history_and_more",
        "description": "webapp.migrations.0024_companies_service_inventory_invoice_medical_history_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0023_remove_inventory_company_source_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Companies',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('company_name', models.CharField(max_length=255)),",
        "detail": "webapp.migrations.0024_companies_service_inventory_invoice_medical_history_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0025_remove_paymentservice_payment_and_more",
        "description": "webapp.migrations.0025_remove_paymentservice_payment_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0024_companies_service_inventory_invoice_medical_history_and_more'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='paymentservice',\n            name='payment',\n        ),\n        migrations.RemoveField(",
        "detail": "webapp.migrations.0025_remove_paymentservice_payment_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0026_payment",
        "description": "webapp.migrations.0026_payment",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0025_remove_paymentservice_payment_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Payment',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('created_at', models.DateTimeField(auto_now_add=True)),",
        "detail": "webapp.migrations.0026_payment",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0027_remove_payment_inventory_and_more",
        "description": "webapp.migrations.0027_remove_payment_inventory_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0026_payment'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='payment',\n            name='inventory',\n        ),\n        migrations.RemoveField(",
        "detail": "webapp.migrations.0027_remove_payment_inventory_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0028_activitylog_profile",
        "description": "webapp.migrations.0028_activitylog_profile",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0027_remove_payment_inventory_and_more'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ActivityLog',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "webapp.migrations.0028_activitylog_profile",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0029_remove_profile_user_delete_activitylog_and_more",
        "description": "webapp.migrations.0029_remove_profile_user_delete_activitylog_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0028_activitylog_profile'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='profile',\n            name='user',\n        ),\n        migrations.DeleteModel(",
        "detail": "webapp.migrations.0029_remove_profile_user_delete_activitylog_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0030_useractivity",
        "description": "webapp.migrations.0030_useractivity",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0029_remove_profile_user_delete_activitylog_and_more'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='UserActivity',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "webapp.migrations.0030_useractivity",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0031_delete_useractivity",
        "description": "webapp.migrations.0031_delete_useractivity",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0030_useractivity'),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name='UserActivity',\n        ),\n    ]",
        "detail": "webapp.migrations.0031_delete_useractivity",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0032_useractivity",
        "description": "webapp.migrations.0032_useractivity",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0031_delete_useractivity'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='UserActivity',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "webapp.migrations.0032_useractivity",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0033_delete_useractivity",
        "description": "webapp.migrations.0033_delete_useractivity",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0032_useractivity'),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name='UserActivity',\n        ),\n    ]",
        "detail": "webapp.migrations.0033_delete_useractivity",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0034_useractivity",
        "description": "webapp.migrations.0034_useractivity",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0033_delete_useractivity'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='UserActivity',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "webapp.migrations.0034_useractivity",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0035_paymentservice_price_at_time_of_payment",
        "description": "webapp.migrations.0035_paymentservice_price_at_time_of_payment",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0034_useractivity'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='paymentservice',\n            name='price_at_time_of_payment',\n            field=models.DecimalField(decimal_places=2, default=0, max_digits=10),\n        ),",
        "detail": "webapp.migrations.0035_paymentservice_price_at_time_of_payment",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0036_paymentinventory_price_at_time_of_payment",
        "description": "webapp.migrations.0036_paymentinventory_price_at_time_of_payment",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0035_paymentservice_price_at_time_of_payment'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='paymentinventory',\n            name='price_at_time_of_payment',\n            field=models.DecimalField(decimal_places=2, default=0, max_digits=10),\n        ),",
        "detail": "webapp.migrations.0036_paymentinventory_price_at_time_of_payment",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0037_alter_payment_patient",
        "description": "webapp.migrations.0037_alter_payment_patient",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0036_paymentinventory_price_at_time_of_payment'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='payment',\n            name='patient',\n            field=models.CharField(max_length=20),\n        ),",
        "detail": "webapp.migrations.0037_alter_payment_patient",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0038_alter_reserve_branch",
        "description": "webapp.migrations.0038_alter_reserve_branch",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0037_alter_payment_patient'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='reserve',\n            name='Branch',\n            field=models.CharField(choices=[('EL_Mohandsen', 'EL_Mohandsen'), ('5th_sattelment', '5th_sattelment'), ('Naser_city', 'Naser_city')], default='Branch', max_length=50),\n        ),",
        "detail": "webapp.migrations.0038_alter_reserve_branch",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0039_alter_payment_method",
        "description": "webapp.migrations.0039_alter_payment_method",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0038_alter_reserve_branch'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='payment',\n            name='method',\n            field=models.CharField(choices=[('INSTAPAY', 'INSTAPAY'), ('CASH', 'CASH'), ('CREDIT CARD', 'CREDIT CARD'), ('E_WALLET', 'E_WALLET')], default='CASH', max_length=100),\n        ),",
        "detail": "webapp.migrations.0039_alter_payment_method",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0040_invoice_due_dates_invoice_is_fully_paid_and_more",
        "description": "webapp.migrations.0040_invoice_due_dates_invoice_is_fully_paid_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0039_alter_payment_method'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='invoice',\n            name='due_dates',\n            field=models.JSONField(blank=True, null=True),\n        ),",
        "detail": "webapp.migrations.0040_invoice_due_dates_invoice_is_fully_paid_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0041_payment_branch",
        "description": "webapp.migrations.0041_payment_branch",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0040_invoice_due_dates_invoice_is_fully_paid_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='payment',\n            name='Branch',\n            field=models.CharField(choices=[('EL_Mohandsen', 'EL_Mohandsen'), ('5th_sattelment', '5th_sattelment'), ('Naser_city', 'Naser_city')], default='Branch', max_length=50),\n        ),",
        "detail": "webapp.migrations.0041_payment_branch",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 6,
            "peekOfCode": "class  CategoryAdmin(admin.ModelAdmin):\n    pass\n@admin.register(Record)\nclass RecordAdmin(admin.ModelAdmin):\n    pass\n@admin.register(patient)\nclass patientAdmin(admin.ModelAdmin):\n    pass \n@admin.register(Reserve)\nclass ReserveAdmin(admin.ModelAdmin):"
        },
        "kind": 6,
        "importPath": "webapp.admin",
        "description": "webapp.admin",
        "peekOfCode": "class  CategoryAdmin(admin.ModelAdmin):\n    pass\n@admin.register(Record)\nclass RecordAdmin(admin.ModelAdmin):\n    pass\n@admin.register(patient)\nclass patientAdmin(admin.ModelAdmin):\n    pass \n@admin.register(Reserve)\nclass ReserveAdmin(admin.ModelAdmin):",
        "detail": "webapp.admin",
        "documentation": {}
    },
    {
        "label": "RecordAdmin",
        "kind": 6,
        "importPath": "webapp.admin",
        "description": "webapp.admin",
        "peekOfCode": "class RecordAdmin(admin.ModelAdmin):\n    pass\n@admin.register(patient)\nclass patientAdmin(admin.ModelAdmin):\n    pass \n@admin.register(Reserve)\nclass ReserveAdmin(admin.ModelAdmin):\n    pass\n# تسجيل نموذج Companies\nclass CompaniesAdmin(admin.ModelAdmin):",
        "detail": "webapp.admin",
        "documentation": {}
    },
    {
        "label": "patientAdmin",
        "kind": 6,
        "importPath": "webapp.admin",
        "description": "webapp.admin",
        "peekOfCode": "class patientAdmin(admin.ModelAdmin):\n    pass \n@admin.register(Reserve)\nclass ReserveAdmin(admin.ModelAdmin):\n    pass\n# تسجيل نموذج Companies\nclass CompaniesAdmin(admin.ModelAdmin):\n    list_display = ('company_name', 'company_address', 'company_phone', 'total_paid', 'total_due')\n    search_fields = ('company_name', 'company_phone')\n    list_filter = ('total_due',)",
        "detail": "webapp.admin",
        "documentation": {}
    },
    {
        "label": "ReserveAdmin",
        "kind": 6,
        "importPath": "webapp.admin",
        "description": "webapp.admin",
        "peekOfCode": "class ReserveAdmin(admin.ModelAdmin):\n    pass\n# تسجيل نموذج Companies\nclass CompaniesAdmin(admin.ModelAdmin):\n    list_display = ('company_name', 'company_address', 'company_phone', 'total_paid', 'total_due')\n    search_fields = ('company_name', 'company_phone')\n    list_filter = ('total_due',)\n# تسجيل نموذج Inventory\nclass InventoryAdmin(admin.ModelAdmin):\n    list_display = ('item_name', 'item_quantity', 'item_price', 'item_cost', 'company_source', 'created_at')",
        "detail": "webapp.admin",
        "documentation": {}
    },
    {
        "label": "CompaniesAdmin",
        "kind": 6,
        "importPath": "webapp.admin",
        "description": "webapp.admin",
        "peekOfCode": "class CompaniesAdmin(admin.ModelAdmin):\n    list_display = ('company_name', 'company_address', 'company_phone', 'total_paid', 'total_due')\n    search_fields = ('company_name', 'company_phone')\n    list_filter = ('total_due',)\n# تسجيل نموذج Inventory\nclass InventoryAdmin(admin.ModelAdmin):\n    list_display = ('item_name', 'item_quantity', 'item_price', 'item_cost', 'company_source', 'created_at')\n    search_fields = ('item_name', 'company_source__company_name')\n    list_filter = ('company_source', 'created_at')\n# تسجيل نموذج Service",
        "detail": "webapp.admin",
        "documentation": {}
    },
    {
        "label": "InventoryAdmin",
        "kind": 6,
        "importPath": "webapp.admin",
        "description": "webapp.admin",
        "peekOfCode": "class InventoryAdmin(admin.ModelAdmin):\n    list_display = ('item_name', 'item_quantity', 'item_price', 'item_cost', 'company_source', 'created_at')\n    search_fields = ('item_name', 'company_source__company_name')\n    list_filter = ('company_source', 'created_at')\n# تسجيل نموذج Service\nclass ServiceAdmin(admin.ModelAdmin):\n    list_display = ('name', 'price')\n    search_fields = ('name',)\n# تسجيل نموذج PaymentService كـ Inline لتضمينه في Payment\nclass PaymentServiceInline(admin.TabularInline):",
        "detail": "webapp.admin",
        "documentation": {}
    },
    {
        "label": "ServiceAdmin",
        "kind": 6,
        "importPath": "webapp.admin",
        "description": "webapp.admin",
        "peekOfCode": "class ServiceAdmin(admin.ModelAdmin):\n    list_display = ('name', 'price')\n    search_fields = ('name',)\n# تسجيل نموذج PaymentService كـ Inline لتضمينه في Payment\nclass PaymentServiceInline(admin.TabularInline):\n    model = PaymentService\n    extra = 1\n# تسجيل نموذج PaymentInventory كـ Inline لتضمينه في Payment\nclass PaymentInventoryInline(admin.TabularInline):\n    model = PaymentInventory",
        "detail": "webapp.admin",
        "documentation": {}
    },
    {
        "label": "PaymentServiceInline",
        "kind": 6,
        "importPath": "webapp.admin",
        "description": "webapp.admin",
        "peekOfCode": "class PaymentServiceInline(admin.TabularInline):\n    model = PaymentService\n    extra = 1\n# تسجيل نموذج PaymentInventory كـ Inline لتضمينه في Payment\nclass PaymentInventoryInline(admin.TabularInline):\n    model = PaymentInventory\n    extra = 1\n# تسجيل نموذج Payment مع Inline للخدمات والمنتجات\nclass PaymentAdmin(admin.ModelAdmin):\n    list_display = ('patient', 'created_at', 'status', 'method', 'get_total_amount')",
        "detail": "webapp.admin",
        "documentation": {}
    },
    {
        "label": "PaymentInventoryInline",
        "kind": 6,
        "importPath": "webapp.admin",
        "description": "webapp.admin",
        "peekOfCode": "class PaymentInventoryInline(admin.TabularInline):\n    model = PaymentInventory\n    extra = 1\n# تسجيل نموذج Payment مع Inline للخدمات والمنتجات\nclass PaymentAdmin(admin.ModelAdmin):\n    list_display = ('patient', 'created_at', 'status', 'method', 'get_total_amount')\n    search_fields = ('patient__name',)\n    list_filter = ('status', 'method')\n    inlines = [PaymentServiceInline, PaymentInventoryInline]  # تضمين النماذج الفرعية للخدمات والمنتجات\n# تسجيل نموذج Invoice",
        "detail": "webapp.admin",
        "documentation": {}
    },
    {
        "label": "PaymentAdmin",
        "kind": 6,
        "importPath": "webapp.admin",
        "description": "webapp.admin",
        "peekOfCode": "class PaymentAdmin(admin.ModelAdmin):\n    list_display = ('patient', 'created_at', 'status', 'method', 'get_total_amount')\n    search_fields = ('patient__name',)\n    list_filter = ('status', 'method')\n    inlines = [PaymentServiceInline, PaymentInventoryInline]  # تضمين النماذج الفرعية للخدمات والمنتجات\n# تسجيل نموذج Invoice\nclass InvoiceAdmin(admin.ModelAdmin):\n    list_display = ('company', 'item', 'quantity_purchased', 'quantity_used', 'purchase_date', 'total_cost')\n    search_fields = ('company__company_name', 'item__item_name')\n    list_filter = ('company', 'purchase_date')",
        "detail": "webapp.admin",
        "documentation": {}
    },
    {
        "label": "InvoiceAdmin",
        "kind": 6,
        "importPath": "webapp.admin",
        "description": "webapp.admin",
        "peekOfCode": "class InvoiceAdmin(admin.ModelAdmin):\n    list_display = ('company', 'item', 'quantity_purchased', 'quantity_used', 'purchase_date', 'total_cost')\n    search_fields = ('company__company_name', 'item__item_name')\n    list_filter = ('company', 'purchase_date')\n# تسجيل نموذج Medical_History\nclass MedicalHistoryAdmin(admin.ModelAdmin):\n    list_display = ('patient', 'medical_notes')\n    search_fields = ('patient__name',)\n# تسجيل النماذج في لوحة تحكم Django\nadmin.site.register(Companies, CompaniesAdmin)",
        "detail": "webapp.admin",
        "documentation": {}
    },
    {
        "label": "MedicalHistoryAdmin",
        "kind": 6,
        "importPath": "webapp.admin",
        "description": "webapp.admin",
        "peekOfCode": "class MedicalHistoryAdmin(admin.ModelAdmin):\n    list_display = ('patient', 'medical_notes')\n    search_fields = ('patient__name',)\n# تسجيل النماذج في لوحة تحكم Django\nadmin.site.register(Companies, CompaniesAdmin)\nadmin.site.register(Inventory, InventoryAdmin)\nadmin.site.register(Service, ServiceAdmin)\nadmin.site.register(Payment, PaymentAdmin)\nadmin.site.register(Invoice, InvoiceAdmin)\nadmin.site.register(Medical_History, MedicalHistoryAdmin)",
        "detail": "webapp.admin",
        "documentation": {}
    },
    {
        "label": "WebappConfig",
        "kind": 6,
        "importPath": "webapp.apps",
        "description": "webapp.apps",
        "peekOfCode": "class WebappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'webapp'\n    def ready(self):\n        import webapp.signals  # تأكد من أن هذا الاستيراد صحيح",
        "detail": "webapp.apps",
        "documentation": {}
    },
    {
        "label": "CreateUserForm",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class CreateUserForm(UserCreationForm):\n    class meta :\n        model = User\n        fields = ['username','password1','password2']\nclass loginForm(AuthenticationForm):\n    username = forms.CharField(widget=TextInput())\n    password = forms.CharField(widget=PasswordInput())\nclass patient_form(forms.ModelForm):\n    class Meta: \n        model = patient",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "loginForm",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class loginForm(AuthenticationForm):\n    username = forms.CharField(widget=TextInput())\n    password = forms.CharField(widget=PasswordInput())\nclass patient_form(forms.ModelForm):\n    class Meta: \n        model = patient\n        fields =  fields = ['name', 'date_of_birth', 'phone','address', 'last_visit' ]\nclass patient_form_edit(forms.ModelForm):\n    class Meta: \n        model = patient",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "patient_form",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class patient_form(forms.ModelForm):\n    class Meta: \n        model = patient\n        fields =  fields = ['name', 'date_of_birth', 'phone','address', 'last_visit' ]\nclass patient_form_edit(forms.ModelForm):\n    class Meta: \n        model = patient\n        fields =  fields = ['name', 'date_of_birth', 'phone','address', 'last_visit' ]\nclass ReserveForm(forms.ModelForm):\n    patient_name = forms.CharField(max_length=100, label='Patient Name')",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "patient_form_edit",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class patient_form_edit(forms.ModelForm):\n    class Meta: \n        model = patient\n        fields =  fields = ['name', 'date_of_birth', 'phone','address', 'last_visit' ]\nclass ReserveForm(forms.ModelForm):\n    patient_name = forms.CharField(max_length=100, label='Patient Name')\n    class Meta:\n        model = Reserve\n        fields = ['patient_name', 'phone', 'date', 'time', 'service' ,'Branch']\n    def save(self, commit=True):",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "ReserveForm",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class ReserveForm(forms.ModelForm):\n    patient_name = forms.CharField(max_length=100, label='Patient Name')\n    class Meta:\n        model = Reserve\n        fields = ['patient_name', 'phone', 'date', 'time', 'service' ,'Branch']\n    def save(self, commit=True):\n        patient_name = self.cleaned_data.get('patient_name')\n        phone = self.cleaned_data.get('phone')  \n        patient_instance, created = patient.objects.get_or_create(\n            name=patient_name, ",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "CompanyForm",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class CompanyForm(forms.ModelForm):\n    class Meta:\n        model = Companies\n        fields = ['company_name', 'company_address', 'company_phone', 'total_paid', 'total_due']\nclass InventoryForm(forms.ModelForm):\n    class Meta:\n        model = Inventory\n        fields = ['item_name', 'item_quantity', 'item_price', 'item_cost', 'company_source']\nclass ServiceForm(forms.ModelForm):\n    class Meta:",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "InventoryForm",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class InventoryForm(forms.ModelForm):\n    class Meta:\n        model = Inventory\n        fields = ['item_name', 'item_quantity', 'item_price', 'item_cost', 'company_source']\nclass ServiceForm(forms.ModelForm):\n    class Meta:\n        model = Service\n        fields = ['name', 'price']\nfrom django import forms\nfrom django.forms import inlineformset_factory",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "ServiceForm",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class ServiceForm(forms.ModelForm):\n    class Meta:\n        model = Service\n        fields = ['name', 'price']\nfrom django import forms\nfrom django.forms import inlineformset_factory\nfrom .models import Payment, PaymentService, PaymentInventory\nclass PaymentForm(forms.ModelForm):\n    class Meta:\n        model = Payment",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "PaymentForm",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class PaymentForm(forms.ModelForm):\n    class Meta:\n        model = Payment\n        fields = ['patient','Branch', 'status', 'method']\n# لإنشاء عدة إدخالات للخدمات\nclass PaymentServiceForm(forms.ModelForm):\n    class Meta:\n        model = PaymentService\n        fields = ['service', 'quantity', 'price_at_time_of_payment']  # إضافة الحقل للسعر\nclass PaymentInventoryForm(forms.ModelForm):",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "PaymentServiceForm",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class PaymentServiceForm(forms.ModelForm):\n    class Meta:\n        model = PaymentService\n        fields = ['service', 'quantity', 'price_at_time_of_payment']  # إضافة الحقل للسعر\nclass PaymentInventoryForm(forms.ModelForm):\n    class Meta:\n        model = PaymentInventory\n        fields = ['inventory', 'quantity', 'price_at_time_of_payment']  # إضافة الحقل للسعر\n# لإنشاء عدة إدخالات للخدمات\nPaymentServiceFormSet = inlineformset_factory(",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "PaymentInventoryForm",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class PaymentInventoryForm(forms.ModelForm):\n    class Meta:\n        model = PaymentInventory\n        fields = ['inventory', 'quantity', 'price_at_time_of_payment']  # إضافة الحقل للسعر\n# لإنشاء عدة إدخالات للخدمات\nPaymentServiceFormSet = inlineformset_factory(\n    Payment, PaymentService, \n    form=PaymentServiceForm,  # استخدام النموذج المعدل\n    extra=1, can_delete=True\n)",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "InvoiceForm",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class InvoiceForm(forms.ModelForm):\n    payment_method = forms.ChoiceField(choices=Invoice.PAYMENT_METHODS, label=\"Payment Method\", required=False)\n    due_dates = forms.CharField(widget=forms.HiddenInput(), required=False)  # ستملأها باستخدام JavaScript\n    payments = forms.CharField(widget=forms.HiddenInput(), required=False)   # ستملأها باستخدام JavaScript\n    class Meta:\n        model = Invoice\n        fields = ['company', 'item', 'quantity_purchased', 'total_cost', 'payment_method']\n    def clean(self):\n        cleaned_data = super().clean()\n        payment_method = cleaned_data.get(\"payment_method\")",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "MedicalHistoryForm",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class MedicalHistoryForm(forms.ModelForm):\n    class Meta:\n        model = Medical_History\n        fields = ['medical_notes']  # تأكد من عدم إدراج المريض هنا، سيتم تعيينه في الفيو                                 \nclass ServiceForm(forms.ModelForm):\n    class Meta:\n        model = Service\n        fields = ['name', 'price']",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "ServiceForm",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class ServiceForm(forms.ModelForm):\n    class Meta:\n        model = Service\n        fields = ['name', 'price']",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "PaymentServiceFormSet",
        "kind": 5,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "PaymentServiceFormSet = inlineformset_factory(\n    Payment, PaymentService, \n    form=PaymentServiceForm,  # استخدام النموذج المعدل\n    extra=1, can_delete=True\n)\n# لإنشاء عدة إدخالات للمنتجات\nPaymentInventoryFormSet = inlineformset_factory(\n    Payment, PaymentInventory, \n    form=PaymentInventoryForm,  # استخدام النموذج المعدل\n    extra=1, can_delete=True",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "PaymentInventoryFormSet",
        "kind": 5,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "PaymentInventoryFormSet = inlineformset_factory(\n    Payment, PaymentInventory, \n    form=PaymentInventoryForm,  # استخدام النموذج المعدل\n    extra=1, can_delete=True\n)\n#class PaymentServiceForm(forms.ModelForm):\n  #  class Meta:\n       # model = PaymentService\n      #  fields = [ 'service', 'quantity']\n#class PaymentInventoryForm(forms.ModelForm):",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "webapp.models",
        "description": "webapp.models",
        "peekOfCode": "class Category(models.Model):\n    name = models.CharField(max_length=100)\n    creat_at = models.DateTimeField (auto_now_add = True)\n    def __str__(self): \n        return self.name\n    #client model\nclass Record(models.Model):\n    name = models.CharField(max_length=250)\n    phone = models.IntegerField()\n    address = models.CharField(max_length=255, default='Default Address')",
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "Record",
        "kind": 6,
        "importPath": "webapp.models",
        "description": "webapp.models",
        "peekOfCode": "class Record(models.Model):\n    name = models.CharField(max_length=250)\n    phone = models.IntegerField()\n    address = models.CharField(max_length=255, default='Default Address')\n    creat_at = models.DateTimeField (auto_now_add = True)\n    def __str__(self): \n        return self.name\nclass patient(models.Model):\n    name = models.CharField(max_length=250)\n    phone = models.IntegerField()",
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "patient",
        "kind": 6,
        "importPath": "webapp.models",
        "description": "webapp.models",
        "peekOfCode": "class patient(models.Model):\n    name = models.CharField(max_length=250)\n    phone = models.IntegerField()\n    address = models.CharField(max_length=255, default='Default Address') \n    create_at = models.DateTimeField (auto_now_add = True)\n    date_of_birth = models.DateField(null=True, blank=True)\n    last_visit = models.DateField(null=True, blank=True)\n    def __str__(self):\n        return self.name  \n    class Meta :",
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "Reserve",
        "kind": 6,
        "importPath": "webapp.models",
        "description": "webapp.models",
        "peekOfCode": "class Reserve(models.Model):\n    STATUS_CHOICES = [\n        ('completed', 'Completed'),\n        ('pending', 'Pending'),\n        ('cancelled', 'Cancelled'),\n    ]\n    BRANCH_CHOICES = [\n        ('EL_Mohandsen', 'EL_Mohandsen'),\n        ('5th_sattelment', '5th_sattelment'),\n        ('Naser_city', 'Naser_city'),",
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "Companies",
        "kind": 6,
        "importPath": "webapp.models",
        "description": "webapp.models",
        "peekOfCode": "class Companies(models.Model):\n    company_name = models.CharField(max_length=255)\n    company_address = models.CharField(max_length=500)\n    company_phone = models.CharField(max_length=20)\n    total_paid = models.DecimalField(max_digits=10, decimal_places=2, default=0)  # إجمالي المدفوعات\n    total_due = models.DecimalField(max_digits=10, decimal_places=2, default=0)   # إجمالي المتبقي\n    def __str__(self):\n        return self.company_name\n    def get_total_due(self):\n        \"\"\"إجمالي المدفوعات المتبقية على الشركة\"\"\"",
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "Inventory",
        "kind": 6,
        "importPath": "webapp.models",
        "description": "webapp.models",
        "peekOfCode": "class Inventory(models.Model):\n    item_name = models.CharField(max_length=300)\n    item_quantity = models.IntegerField()  # الكمية الموجودة في المخزن\n    item_price = models.DecimalField(max_digits=10, decimal_places=2)  # سعر البيع\n    item_cost = models.DecimalField(max_digits=10, decimal_places=2)  # تكلفة المنتج\n    company_source = models.ForeignKey(Companies, on_delete=models.CASCADE, related_name='inventory_items')\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return self.item_name\n    def reduce_quantity(self, quantity):",
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "Service",
        "kind": 6,
        "importPath": "webapp.models",
        "description": "webapp.models",
        "peekOfCode": "class Service(models.Model):\n    name = models.CharField(max_length=100)\n    price = models.DecimalField(max_digits=10, decimal_places=2)  # سعر الخدمة\n    def __str__(self):\n        return self.name\nclass Payment(models.Model):\n    STATUS_CHOICES = [\n        ('Paid', 'Paid'),\n        ('Pending', 'Pending'),\n        ('Cancelled', 'Cancelled'),",
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "Payment",
        "kind": 6,
        "importPath": "webapp.models",
        "description": "webapp.models",
        "peekOfCode": "class Payment(models.Model):\n    STATUS_CHOICES = [\n        ('Paid', 'Paid'),\n        ('Pending', 'Pending'),\n        ('Cancelled', 'Cancelled'),\n    ]\n    METHOD_CHOICES = [\n        ('INSTAPAY', 'INSTAPAY'),\n        ('CASH', 'CASH'),\n        ('CREDIT CARD', 'CREDIT CARD'),",
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "PaymentService",
        "kind": 6,
        "importPath": "webapp.models",
        "description": "webapp.models",
        "peekOfCode": "class PaymentService(models.Model):\n    payment = models.ForeignKey(Payment, on_delete=models.CASCADE)\n    service = models.ForeignKey(Service, on_delete=models.CASCADE)\n    quantity = models.PositiveIntegerField(default=1)\n    price_at_time_of_payment = models.DecimalField(max_digits=10, decimal_places=2, default=0)  # السعر وقت الدفع\n    def __str__(self):\n        return f\"{self.quantity} x {self.service.name} for {self.payment}\"\n    def save(self, *args, **kwargs):\n        # حفظ السعر في وقت إنشاء الفاتورة إذا لم يكن محفوظاً مسبقاً\n        if not self.price_at_time_of_payment:",
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "PaymentInventory",
        "kind": 6,
        "importPath": "webapp.models",
        "description": "webapp.models",
        "peekOfCode": "class PaymentInventory(models.Model):\n    payment = models.ForeignKey(Payment, on_delete=models.CASCADE)\n    inventory = models.ForeignKey(Inventory, on_delete=models.CASCADE)\n    quantity = models.PositiveIntegerField(default=1)\n    price_at_time_of_payment = models.DecimalField(max_digits=10, decimal_places=2, default=0)   # السعر وقت الفاتورة\n    def __str__(self):\n        return f\"{self.quantity} x {self.inventory.item_name} for {self.payment}\"\n    def save(self, *args, **kwargs):\n        # حفظ السعر في وقت إنشاء الفاتورة إذا لم يكن محفوظاً مسبقاً\n        if not self.price_at_time_of_payment:",
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "Invoice",
        "kind": 6,
        "importPath": "webapp.models",
        "description": "webapp.models",
        "peekOfCode": "class Invoice(models.Model):\n    PAYMENT_METHODS = [\n        ('Immediate', 'Immediate Payment'),\n        ('Deferred', 'Deferred Payment'),\n    ]\n    company = models.ForeignKey(Companies, on_delete=models.CASCADE, related_name='invoices')\n    item = models.ForeignKey(Inventory, on_delete=models.CASCADE, related_name='invoices')\n    quantity_purchased = models.IntegerField()\n    quantity_used = models.IntegerField(default=0)  # الكمية المستخدمة\n    purchase_date = models.DateField(auto_now_add=True)",
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "Medical_History",
        "kind": 6,
        "importPath": "webapp.models",
        "description": "webapp.models",
        "peekOfCode": "class Medical_History(models.Model):\n    patient = models.ForeignKey(patient, on_delete=models.CASCADE)\n    medical_notes = models.CharField(max_length=1000)\n    created_at = models.DateField(auto_now_add=True)\n    def __str__(self):\n        return self.patient.name\nclass UserActivity(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    login_time = models.DateTimeField(null=True, blank=True)\n    logout_time = models.DateTimeField(null=True, blank=True)",
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "UserActivity",
        "kind": 6,
        "importPath": "webapp.models",
        "description": "webapp.models",
        "peekOfCode": "class UserActivity(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    login_time = models.DateTimeField(null=True, blank=True)\n    logout_time = models.DateTimeField(null=True, blank=True)\n    is_active = models.BooleanField(default=False)  # حالة المستخدم (نشط/غير نشط)\n    date = models.DateField(auto_now_add=True)  # تاريخ اليوم\n    def __str__(self):\n        return f\"{self.user.username} - {self.date}\"",
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "webapp.urls",
        "description": "webapp.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.index,name='home'),\n    path('register/', views.register, name='register'),\n    path('my-login', views.my_Login,name='login'),\n    path ('dashboard', views.dashboard, name='dashboard'),\n    path('logout/', views.my_Logout, name='logout'),\n    path('patients', views.patients,name='patients'),\n    path('Appointments',views.Appointments,name='Appointments'),\n    path('billing', views.billing, name='billing'),\n    path ('report', views.report, name='report'),",
        "detail": "webapp.urls",
        "documentation": {}
    },
    {
        "label": "inde",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def index (request):\n    return render(request, 'web/index.html')\nfrom django.shortcuts import render, redirect\nfrom django.contrib.auth.forms import UserCreationForm, AuthenticationForm\nfrom django.contrib.auth import authenticate, login\ndef register(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            form.save()",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def register(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('login')  # Redirect to the login URL pattern after registration\n    else:\n        form = UserCreationForm()\n    context = {'form': form}\n    return render(request, 'web/register.html', context)",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "my_Login",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def my_Login(request):\n    if request.method == 'POST':\n        form = AuthenticationForm(request, data=request.POST)\n        if form.is_valid():\n            username = form.cleaned_data.get('username')\n            password = form.cleaned_data.get('password')\n            user = authenticate(request, username=username, password=password)\n            if user is not None:\n                login(request, user)\n                # تحديث أو إنشاء سجل النشاط",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "dashboard",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def dashboard(request):\n    total_patients = patient.objects.count()\n    today = timezone.now().date()\n    appointments_today = Reserve.objects.filter(date=today).count()\n    recent_appointments = Reserve.objects.order_by('-date', '-time')[:5]\n    context= {\n        'total_patients': total_patients,\n        'appointments_today': appointments_today,\n        'recent_appointments': recent_appointments\n    }",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "patient",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def patients (request):\n    records=patient.objects.all()\n    query = request.GET.get('q')  \n    if query:\n        records = patient.objects.filter(name__icontains=query) | patient.objects.filter(phone__icontains=query)\n    else:\n        records = patient.objects.all()\n    return render(request, 'web/patients.html',context={'records':records})\ndef edit_patient(request, record_id):\n    patient_record = get_object_or_404(patient, id=record_id)",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "edit_patient",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def edit_patient(request, record_id):\n    patient_record = get_object_or_404(patient, id=record_id)\n    if request.method == 'POST':\n        form = patient_form_edit(request.POST, instance=patient_record)\n        if form.is_valid():\n            form.save()\n            return redirect('view_patient', record_id=patient_record.id)  \n    else:\n        form = patient_form_edit(instance=patient_record)\n    context = {",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "delete_patient",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def delete_patient(request, patient_id):\n    Patient = get_object_or_404(patient, id=patient_id)\n    if request.method == 'POST':\n        Patient.delete()\n        return redirect(reverse('patients'))  \n    return render(request, 'confirm_delete.html', {'patient': patient})\n@login_required(login_url='login')\ndef view_patient(request, record_id):\n    # تأكد من الحصول على كائن المريض الصحيح\n    patient_record = get_object_or_404(patient, id=record_id)  # تأكد من أن هذا يُرجع كائن مريض",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "view_patient",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def view_patient(request, record_id):\n    # تأكد من الحصول على كائن المريض الصحيح\n    patient_record = get_object_or_404(patient, id=record_id)  # تأكد من أن هذا يُرجع كائن مريض\n    # السجل الطبي\n    medical_history = Medical_History.objects.filter(patient=patient_record)\n    # الحجوزات\n    reservations = Reserve.objects.filter(name=patient_record)\n    # الفواتير\n    payments = Payment.objects.filter(patient=patient_record)\n    # إضافة السجل الطبي",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "add_patien",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def add_patient (request):\n    form= patient_form()\n    if request.method=='POST':\n        form=patient_form(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('patients')\n    else:\n        form = patient_form()   \n    context= {",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "Appointments",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def Appointments(request):\n    query = request.GET.get('q')  \n    if query:\n        records = Reserve.objects.filter(\n            Q(name__name__icontains=query) |  \n            Q(phone__icontains=query)  \n        )\n    else:\n        records = Reserve.objects.all()\n    return render(request, 'web/Appointments.html', context={'records': records})",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "Schedule_Appointment",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def Schedule_Appointment(request):\n    if request.method == 'POST':\n        form = ReserveForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('Appointments')\n    else:\n        form = ReserveForm()\n    context = {'form': form}\n    return render(request, 'web/Schedule_Appointment.html', context=context)",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "view_appointment",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def view_appointments (request):\n    return render(request, 'web/view_appointments.html')\ndef update_appointment_status(request, appointment_id, status):\n    record = get_object_or_404(Reserve, id=appointment_id)\n    record.status = status\n    record.save()\n    return redirect('Appointments')\ndef billing (request):\n    return render(request, 'web/billing.html')\ndef report(request):",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "update_appointment_status",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def update_appointment_status(request, appointment_id, status):\n    record = get_object_or_404(Reserve, id=appointment_id)\n    record.status = status\n    record.save()\n    return redirect('Appointments')\ndef billing (request):\n    return render(request, 'web/billing.html')\ndef report(request):\n    return render(request , 'web/report.html')\ndef settings(request):",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "billin",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def billing (request):\n    return render(request, 'web/billing.html')\ndef report(request):\n    return render(request , 'web/report.html')\ndef settings(request):\n    return render(request , 'web/settings.html')\ndef my_Logout(request):\n    if request.user.is_authenticated:\n        # تحديث سجل النشاط\n        activity = UserActivity.objects.filter(user=request.user, date=timezone.now().date()).first()",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "report",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def report(request):\n    return render(request , 'web/report.html')\ndef settings(request):\n    return render(request , 'web/settings.html')\ndef my_Logout(request):\n    if request.user.is_authenticated:\n        # تحديث سجل النشاط\n        activity = UserActivity.objects.filter(user=request.user, date=timezone.now().date()).first()\n        if activity:\n            activity.logout_time = timezone.now()",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def settings(request):\n    return render(request , 'web/settings.html')\ndef my_Logout(request):\n    if request.user.is_authenticated:\n        # تحديث سجل النشاط\n        activity = UserActivity.objects.filter(user=request.user, date=timezone.now().date()).first()\n        if activity:\n            activity.logout_time = timezone.now()\n            activity.is_active = False\n            activity.save()",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "my_Logout",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def my_Logout(request):\n    if request.user.is_authenticated:\n        # تحديث سجل النشاط\n        activity = UserActivity.objects.filter(user=request.user, date=timezone.now().date()).first()\n        if activity:\n            activity.logout_time = timezone.now()\n            activity.is_active = False\n            activity.save()\n    logout(request)\n    return redirect('login')",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "add_medical_history",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def add_medical_history(request):\n    if request.method == 'POST':\n        form = MedicalHistoryForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('patients')  # Redirect to medical history list after saving\n    else:\n        form = MedicalHistoryForm()\n    return render(request, 'web/add_medical_history.html', {'form': form})\n# Create Company",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "create_company",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def create_company(request):\n    if request.method == 'POST':\n        form = CompanyForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('companies')  # Redirect to company list after saving\n    else:\n        form = CompanyForm()\n    return render(request, 'web/add_company.html', {'form': form})\n# Create Service",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "create_service",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def create_service(request):\n    if request.method == 'POST':\n        form = ServiceForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('service_list')  # Redirect to service list after saving\n    else:\n        form = ServiceForm()\n    return render(request, 'create_service.html', {'form': form})\n #Create Payment",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "create_payment",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def create_payment(request):\n    if request.method == 'POST':\n        payment_form = PaymentForm(request.POST)\n        payment_service_formset = PaymentServiceFormSet(request.POST, prefix='services')\n        payment_inventory_formset = PaymentInventoryFormSet(request.POST, prefix='inventory')\n        if payment_form.is_valid() and payment_service_formset.is_valid() and payment_inventory_formset.is_valid():\n            payment = payment_form.save()\n            # حفظ الخدمات\n            for service_form in payment_service_formset:\n                service_instance = service_form.save(commit=False)",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "payment_detail",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def payment_detail(request, payment_id):\n    payment = get_object_or_404(Payment, id=payment_id)\n    services = payment.paymentservice_set.all()\n    inventories = payment.paymentinventory_set.all()\n    return render(request, 'web/view_bill.html', {\n        'payment': payment,\n        'services': services,\n        'inventories': inventories,\n    })    \ndef edit_payment(request, payment_id):",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "edit_payment",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def edit_payment(request, payment_id):\n    payment = get_object_or_404(Payment, id=payment_id)\n    if request.method == 'POST':\n        payment_form = PaymentForm(request.POST, instance=payment)\n        payment_service_formset = PaymentServiceFormSet(request.POST, instance=payment, prefix='services')\n        payment_inventory_formset = PaymentInventoryFormSet(request.POST, instance=payment, prefix='inventory')\n        if payment_form.is_valid() and payment_service_formset.is_valid() and payment_inventory_formset.is_valid():\n            payment = payment_form.save()\n            # حفظ الخدمات\n            for service_form in payment_service_formset:",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "create_invoice",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def create_invoice(request):\n    if request.method == 'POST':\n        form = InvoiceForm(request.POST)\n        payment_method = request.POST.get('payment_method')  # الحصول على طريقة الدفع\n        if payment_method == 'Deferred':  # إذا كانت طريقة الدفع مؤجلة\n            due_dates = request.POST.get('due_dates')\n            payments = request.POST.get('payments')\n            # التحقق من أن المستخدم أدخل مواعيد المدفوعات والمبالغ\n            if not due_dates or not payments:\n                messages.error(request, \"Please provide due dates and payment amounts for deferred payment.\")",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "company_list",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def company_list(request):\n    companies = Companies.objects.all()\n    return render(request, 'web/Company_list.html', {'companies': companies})\n# List Inventory\ndef inventory_view(request, item_id=None):\n    # جلب قيمة البحث إذا كانت موجودة\n    query = request.GET.get('q')\n    # جلب قائمة العناصر الموجودة في المخزون مع إمكانية البحث\n    if query:\n        # تصفية النتائج بناءً على البحث في اسم العنصر أو اسم الشركة المرتبطة",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "inventory_view",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def inventory_view(request, item_id=None):\n    # جلب قيمة البحث إذا كانت موجودة\n    query = request.GET.get('q')\n    # جلب قائمة العناصر الموجودة في المخزون مع إمكانية البحث\n    if query:\n        # تصفية النتائج بناءً على البحث في اسم العنصر أو اسم الشركة المرتبطة\n        inventory = Inventory.objects.filter(\n            Q(item_name__icontains=query) | Q(company_source__company_name__icontains=query)\n        )\n    else:",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "update_inventory_item",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def update_inventory_item(request, item_id):\n    # جلب المنتج المحدد بناءً على item_id\n    inventory_item = get_object_or_404(Inventory, id=item_id)\n    # إذا كانت الطلبية POST، نريد تعديل المنتج\n    if request.method == 'POST':\n        form = InventoryForm(request.POST, instance=inventory_item)\n        if form.is_valid():\n            form.save()  # حفظ التعديلات\n            return redirect('inventory')  # إعادة توجيه إلى قائمة المخزون بعد التعديل\n    else:",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "delete_inventory_item",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def delete_inventory_item(request, item_id):\n    # جلب المنتج بناءً على item_id\n    inventory_item = get_object_or_404(Inventory, id=item_id)\n    # إذا كان الطلب POST، نقوم بحذف المنتج\n    if request.method == 'POST':\n        inventory_item.delete()  # حذف العنصر\n        return redirect('inventory')  # إعادة التوجيه إلى قائمة المخزون\n    # إذا كان الطلب GET، نعرض صفحة تأكيد الحذف\n    return render(request, 'web/delete_inventory_confirm.html', {'inventory_item': inventory_item})\n# List Services",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "payment_list",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def payment_list(request):\n    query = request.GET.get('q')  # قيمة البحث من البارامتر\n    branch_filter = request.GET.get('branch')  # الحصول على الفرع المطلوب من البارامتر\n    # بدء البحث الأساسي\n    payments = Payment.objects.all()\n    # تصفية النتائج بناءً على اسم المريض إذا كان هناك بحث\n    if query:\n        payments = payments.filter(Q(patient__icontains=query))\n    # تصفية النتائج حسب الفرع إذا تم تحديده\n    if branch_filter and branch_filter in dict(Payment.BRANCH_CHOICES).keys():",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "update_payment_status",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def update_payment_status(request, payment_id, new_status):\n    # جلب الفاتورة المطلوبة بناءً على الـ ID الخاص بها\n    payment = get_object_or_404(Payment, id=payment_id)\n    # التحقق من أن الحالة الجديدة هي واحدة من القيم المسموحة\n    if new_status in ['Paid', 'Cancelled']:\n        # تحديث حالة الفاتورة بالحالة الجديدة\n        payment.status = new_status\n        payment.save()  # حفظ التعديلات\n        return redirect('payment_list')  # إعادة التوجيه إلى صفحة عرض الفواتير\n    # إذا كانت الحالة غير مسموحة، يمكن عرض رسالة خطأ أو إعادة التوجيه",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "delete_payment",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def delete_payment(request, payment_id):\n    payment = get_object_or_404(Payment, id=payment_id)\n    payment.delete()\n    messages.success(request, f\"Payment {payment_id} has been deleted successfully.\")\n    return redirect('payment_list')  # إعادة التوجيه إلى قائمة الفواتير\ndef edit_payment(request, payment_id):\n    # جلب الفاتورة المطلوبة\n    payment = get_object_or_404(Payment, id=payment_id)\n    if request.method == 'POST':\n        # تعبئة البيانات المدخلة في الفورم",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "edit_payment",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def edit_payment(request, payment_id):\n    # جلب الفاتورة المطلوبة\n    payment = get_object_or_404(Payment, id=payment_id)\n    if request.method == 'POST':\n        # تعبئة البيانات المدخلة في الفورم\n        form = PaymentForm(request.POST, instance=payment)\n        if form.is_valid():\n            # حفظ التعديلات\n            form.save()\n            return redirect('payments')  # إعادة التوجيه إلى صفحة الفواتير بعد التعديل",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "invoice_list",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def invoice_list(request):\n    invoices = Invoice.objects.all()\n    return render(request, 'web/invoice_list.html', {'invoices': invoices})\n# Create Invoice\ndef create_invoice(request):\n    if request.method == 'POST':\n        form = InvoiceForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('invoice_list')  # Redirect to invoice list after saving",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "create_invoice",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def create_invoice(request):\n    if request.method == 'POST':\n        form = InvoiceForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('invoice_list')  # Redirect to invoice list after saving\n    else:\n        form = InvoiceForm()\n    return render(request, 'web/create_invoice.html', {'form': form})\ndef invoice_detail_view(request, id):",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "invoice_detail_view",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def invoice_detail_view(request, id):\n    invoice = get_object_or_404(Invoice, id=id)\n    total_due = invoice.total_cost - invoice.total_paid\n    return render(request, 'web/invoice_detail.html', {'invoice': invoice, 'total_due': total_due})\ndef add_payment_view(request, id):\n    invoice = get_object_or_404(Invoice, id=id)\n    if request.method == 'POST':\n        amount = request.POST.get('amount')\n        if amount:\n            try:",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "add_payment_view",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def add_payment_view(request, id):\n    invoice = get_object_or_404(Invoice, id=id)\n    if request.method == 'POST':\n        amount = request.POST.get('amount')\n        if amount:\n            try:\n                amount = Decimal(amount)  # تحويل المبلغ إلى decimal.Decimal\n                invoice.make_payment(amount)\n                messages.success(request, \"Payment has been added successfully!\")\n            except ValueError:",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "delete_invoice_view",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def delete_invoice_view(request, pk):\n    invoice = get_object_or_404(Invoice, pk=pk)\n    if request.method == 'POST':\n        invoice.delete()\n        messages.success(request, \"Invoice has been deleted successfully!\")\n        return redirect('invoice_list')\n    return render(request, 'confirm_delete.html', {'invoice': invoice})\n# List Medical History\ndef medical_history_list(request):\n    medical_histories = Medical_History.objects.all()",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "medical_history_list",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def medical_history_list(request):\n    medical_histories = Medical_History.objects.all()\n    return render(request, 'medical_history_list.html', {'medical_histories': medical_histories})\ndef get_service_price(request):\n    service_id = request.GET.get('service_id')\n    if service_id:\n        service = Service.objects.get(pk=service_id)\n        return JsonResponse({'price': service.price})\n    return JsonResponse({'price': 0})\ndef get_inventory_price(request):",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "get_service_price",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def get_service_price(request):\n    service_id = request.GET.get('service_id')\n    if service_id:\n        service = Service.objects.get(pk=service_id)\n        return JsonResponse({'price': service.price})\n    return JsonResponse({'price': 0})\ndef get_inventory_price(request):\n    inventory_id = request.GET.get('inventory_id')\n    if inventory_id:\n        inventory = Inventory.objects.get(pk=inventory_id)",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "get_inventory_price",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def get_inventory_price(request):\n    inventory_id = request.GET.get('inventory_id')\n    if inventory_id:\n        inventory = Inventory.objects.get(pk=inventory_id)\n        return JsonResponse({'price': inventory.item_price})\n    return JsonResponse({'price': 0})\n#HCM SYSTEM\ndef user_activity_view(request):\n    activities = UserActivity.objects.all()  # جلب جميع سجلات النشاط\n    return render(request, 'web/user_activity.html', {'activities': activities})",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "user_activity_view",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def user_activity_view(request):\n    activities = UserActivity.objects.all()  # جلب جميع سجلات النشاط\n    return render(request, 'web/user_activity.html', {'activities': activities})\ndef edit_company(request, company_id):\n    company = get_object_or_404(Companies, id=company_id)\n    if request.method == 'POST':\n        form = CompanyForm(request.POST, instance=company)\n        if form.is_valid():\n            form.save()\n            return redirect('company_detail', company_id=company.id)",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "edit_company",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def edit_company(request, company_id):\n    company = get_object_or_404(Companies, id=company_id)\n    if request.method == 'POST':\n        form = CompanyForm(request.POST, instance=company)\n        if form.is_valid():\n            form.save()\n            return redirect('company_detail', company_id=company.id)\n    else:\n        form = CompanyForm(instance=company)\n    return render(request, 'web/edit_company.html', {'form': form})",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "company_detail",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def company_detail(request, company_id):\n    company = get_object_or_404(Companies, id=company_id)\n    items = Inventory.objects.filter(company_source=company)\n    invoice = Invoice.objects.filter(company=company)\n    return render(request, 'web/company_detail.html', {'company': company,'items':items,'invoice':invoice})\ndef delete_company(request, company_id):\n    Patient = get_object_or_404(Companies, id=company_id)\n    if request.method == 'POST':\n        Patient.delete()\n        return redirect(reverse('companies'))  ",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "delete_company",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def delete_company(request, company_id):\n    Patient = get_object_or_404(Companies, id=company_id)\n    if request.method == 'POST':\n        Patient.delete()\n        return redirect(reverse('companies'))  \n    return render(request, 'confirm_delete.html', {'Companies': Companies})\nfrom django.db.models import F, Sum\nfrom django.db.models import Q\nfrom datetime import timedelta, datetime\nfrom django.db.models import Sum, Count, F",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "statistics_view",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def statistics_view(request):\n    # جلب البيانات من الـ GET لتحديد الفترات الزمنية\n    time_frame = request.GET.get('time_frame', 'all')  # الخيارات: اليوم، الأسبوع، الشهر، السنة\n    start_date = request.GET.get('start_date', None)\n    end_date = request.GET.get('end_date', None)\n    # معالجة الفترات الزمنية\n    now = datetime.now()\n    if time_frame == 'day':\n        start_date = now - timedelta(days=1)\n    elif time_frame == 'week':",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "calendar_appointments",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def calendar_appointments(request):\n    # جلب جميع المواعيد من الموديل\n    appointments = Reserve.objects.all().select_related('name')  # لتضمين بيانات صاحب الموعد\n    # تحويل البيانات لتنسيق JSON المطلوب من FullCalendar\n    events = []\n    for appointment in appointments:\n        events.append({\n            'title': f\"{appointment.name.name} - {appointment.service}\",\n            'start': f\"{appointment.date}T{appointment.time}\",\n            'status': appointment.status,",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "service_list",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def service_list(request):\n    query = request.GET.get('q')  # الحصول على مصطلح البحث من الطلب (GET)\n    if query:\n        # تصفية الخدمات بناءً على مصطلح البحث\n        services = Service.objects.filter(name__icontains=query)  # البحث يكون غير حساس لحالة الأحرف\n    else:\n        services = Service.objects.all()\n    return render(request, 'web/service_list.html', {'services': services, 'query': query})\n# إضافة خدمة جديدة\ndef service_create(request):",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "service_create",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def service_create(request):\n    if request.method == 'POST':\n        form = ServiceForm(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Service has been added successfully!\")\n            return redirect('service_list')\n    else:\n        form = ServiceForm()\n    return render(request, 'web/add_service.html', {'form': form})",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "service_update",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def service_update(request, pk):\n    service = get_object_or_404(Service, pk=pk)\n    if request.method == 'POST':\n        form = ServiceForm(request.POST, instance=service)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Service has been updated successfully!\")\n            return redirect('service_list')\n    else:\n        form = ServiceForm(instance=service)",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "service_delete",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def service_delete(request, pk):\n    service = get_object_or_404(Service, pk=pk)\n    if request.method == 'POST':\n        service.delete()\n        messages.success(request, \"Service has been deleted successfully!\")\n        return redirect('service_list')\n    return render(request, 'web/service_list.html', {'service': service})\ndef branch(request):\n    return render(request, 'web/Branches.html')\ndef ElMohandseen_branch(request):",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "branch",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def branch(request):\n    return render(request, 'web/Branches.html')\ndef ElMohandseen_branch(request):\n    # جلب الحجوزات الخاصة بفرع المهندسين\n    reservations = Reserve.objects.filter(Branch='EL_Mohandsen')\n    # جلب الفواتير الخاصة بفرع المهندسين\n    invoices = Payment.objects.filter(Branch='EL_Mohandsen')\n    # حساب الكميات المستهلكة من المخزون لفرع المهندسين\n    inventory_usage = PaymentInventory.objects.filter(payment__Branch='EL_Mohandsen').values(\n        'inventory__item_name'",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "ElMohandseen_branch",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def ElMohandseen_branch(request):\n    # جلب الحجوزات الخاصة بفرع المهندسين\n    reservations = Reserve.objects.filter(Branch='EL_Mohandsen')\n    # جلب الفواتير الخاصة بفرع المهندسين\n    invoices = Payment.objects.filter(Branch='EL_Mohandsen')\n    # حساب الكميات المستهلكة من المخزون لفرع المهندسين\n    inventory_usage = PaymentInventory.objects.filter(payment__Branch='EL_Mohandsen').values(\n        'inventory__item_name'\n    ).annotate(total_quantity_used=Sum('quantity'))\n    # حساب الكميات المستهلكة من الخدمات لفرع المهندسين",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "fifeth_sattelmant_branch",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def fifeth_sattelmant_branch(request):\n    reservations = Reserve.objects.filter(Branch='5th_sattelment')\n    invoices = Payment.objects.filter(Branch='5th_sattelment')\n    inventory_usage = PaymentInventory.objects.filter(payment__Branch='5th_sattelment').values(\n        'inventory__item_name'\n    ).annotate(total_quantity_used=Sum('quantity'))\n    service_usage = PaymentService.objects.filter(payment__Branch='5th_sattelment').values(\n        'service__name'\n    ).annotate(total_quantity_used=Sum('quantity'))\n    context = {",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "naser_city_branch",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def naser_city_branch(request):\n    reservations = Reserve.objects.filter(Branch='Naser_city')\n    invoices = Payment.objects.filter(Branch='Naser_city')\n    inventory_usage = PaymentInventory.objects.filter(payment__Branch='Naser_city').values(\n        'inventory__item_name'\n    ).annotate(total_quantity_used=Sum('quantity'))\n    service_usage = PaymentService.objects.filter(payment__Branch='Naser_city').values(\n        'service__name'\n    ).annotate(total_quantity_used=Sum('quantity'))\n    context = {",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'main_crm.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]
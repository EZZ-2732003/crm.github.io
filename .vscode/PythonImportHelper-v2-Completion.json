[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "AuthenticationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "AuthenticationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "PasswordInput",
        "importPath": "django.forms.widgets",
        "description": "django.forms.widgets",
        "isExtraImport": true,
        "detail": "django.forms.widgets",
        "documentation": {}
    },
    {
        "label": "TextInput",
        "importPath": "django.forms.widgets",
        "description": "django.forms.widgets",
        "isExtraImport": true,
        "detail": "django.forms.widgets",
        "documentation": {}
    },
    {
        "label": "inlineformset_factory",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "inlineformset_factory",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Select2Widget",
        "importPath": "django_select2.forms",
        "description": "django_select2.forms",
        "isExtraImport": true,
        "detail": "django_select2.forms",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "pre_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Prefetch",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "get_template",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "pisa",
        "importPath": "xhtml2pdf",
        "description": "xhtml2pdf",
        "isExtraImport": true,
        "detail": "xhtml2pdf",
        "documentation": {}
    },
    {
        "label": "TruncDay",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "TruncMonth",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "TruncWeek",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "TruncYear",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "main_crm.asgi",
        "description": "main_crm.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "main_crm.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Security settings\nSECRET_KEY = os.getenv('SECRET_KEY', 'your-default-secret-key')  # Change this to a secure value in production\nDEBUG = os.getenv('DEBUG', 'True').lower() in ('true', '1', 'yes')\n# ALLOWED_HOSTS to include dynamic environment settings\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'whitenoise.runserver_nostatic',\n    'django.contrib.admin',",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "SECRET_KEY = os.getenv('SECRET_KEY', 'your-default-secret-key')  # Change this to a secure value in production\nDEBUG = os.getenv('DEBUG', 'True').lower() in ('true', '1', 'yes')\n# ALLOWED_HOSTS to include dynamic environment settings\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'whitenoise.runserver_nostatic',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "DEBUG = os.getenv('DEBUG', 'True').lower() in ('true', '1', 'yes')\n# ALLOWED_HOSTS to include dynamic environment settings\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'whitenoise.runserver_nostatic',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'whitenoise.runserver_nostatic',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'whitenoise.runserver_nostatic',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'webapp.apps.WebappConfig',\n    'crispy_forms',",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "CRISPY_TEMPLATE_PACK",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "CRISPY_TEMPLATE_PACK = 'bootstrap4'\n# Middleware settings\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'whitenoise.middleware.WhiteNoiseMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',  # Make sure CSRF middleware is included\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'whitenoise.middleware.WhiteNoiseMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',  # Make sure CSRF middleware is included\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "ROOT_URLCONF = 'main_crm.urls'\n# Templates configuration\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "WSGI_APPLICATION = 'main_crm.wsgi.application'\n# Database configuration (use environment variable for production settings)\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation settings\nAUTH_PASSWORD_VALIDATORS = [",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation settings\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'Africa/Cairo'\nUSE_I18N = True\nUSE_TZ = True\n# Static files settings\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'templates/static')]\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "TIME_ZONE = 'Africa/Cairo'\nUSE_I18N = True\nUSE_TZ = True\n# Static files settings\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'templates/static')]\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLANGUAGE_CODE = 'en-us'",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files settings\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'templates/static')]\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLANGUAGE_CODE = 'en-us'\nTIME_INPUT_FORMATS = [",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "USE_TZ = True\n# Static files settings\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'templates/static')]\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLANGUAGE_CODE = 'en-us'\nTIME_INPUT_FORMATS = [\n    '%H:%M',      # صيغة 24 ساعة",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'templates/static')]\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLANGUAGE_CODE = 'en-us'\nTIME_INPUT_FORMATS = [\n    '%H:%M',      # صيغة 24 ساعة\n    '%I:%M %p',   # صيغة 12 ساعة AM/PM\n]",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "STATICFILES_DIRS = [os.path.join(BASE_DIR, 'templates/static')]\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLANGUAGE_CODE = 'en-us'\nTIME_INPUT_FORMATS = [\n    '%H:%M',      # صيغة 24 ساعة\n    '%I:%M %p',   # صيغة 12 ساعة AM/PM\n]",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLANGUAGE_CODE = 'en-us'\nTIME_INPUT_FORMATS = [\n    '%H:%M',      # صيغة 24 ساعة\n    '%I:%M %p',   # صيغة 12 ساعة AM/PM\n]",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLANGUAGE_CODE = 'en-us'\nTIME_INPUT_FORMATS = [\n    '%H:%M',      # صيغة 24 ساعة\n    '%I:%M %p',   # صيغة 12 ساعة AM/PM\n]",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_INPUT_FORMATS = [\n    '%H:%M',      # صيغة 24 ساعة\n    '%I:%M %p',   # صيغة 12 ساعة AM/PM\n]",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "TIME_INPUT_FORMATS",
        "kind": 5,
        "importPath": "main_crm.settings",
        "description": "main_crm.settings",
        "peekOfCode": "TIME_INPUT_FORMATS = [\n    '%H:%M',      # صيغة 24 ساعة\n    '%I:%M %p',   # صيغة 12 ساعة AM/PM\n]",
        "detail": "main_crm.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "main_crm.urls",
        "description": "main_crm.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('',include('webapp.urls') )\n]",
        "detail": "main_crm.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "main_crm.wsgi",
        "description": "main_crm.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "main_crm.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0001_initial",
        "description": "webapp.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='appointment',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=300)),",
        "detail": "webapp.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0002_reserve_delete_appointment",
        "description": "webapp.migrations.0002_reserve_delete_appointment",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='reserve',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=300)),",
        "detail": "webapp.migrations.0002_reserve_delete_appointment",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0003_delete_reserve",
        "description": "webapp.migrations.0003_delete_reserve",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0002_reserve_delete_appointment'),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name='reserve',\n        ),\n    ]",
        "detail": "webapp.migrations.0003_delete_reserve",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0004_reserve",
        "description": "webapp.migrations.0004_reserve",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0003_delete_reserve'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Reserve',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=300)),",
        "detail": "webapp.migrations.0004_reserve",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0005_alter_reserve_options",
        "description": "webapp.migrations.0005_alter_reserve_options",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0004_reserve'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='reserve',\n            options={'ordering': ['-create_at']},\n        ),\n    ]",
        "detail": "webapp.migrations.0005_alter_reserve_options",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0006_inventory",
        "description": "webapp.migrations.0006_inventory",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0005_alter_reserve_options'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Inventory',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('item_name', models.CharField(max_length=300)),",
        "detail": "webapp.migrations.0006_inventory",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0007_delete_inventory",
        "description": "webapp.migrations.0007_delete_inventory",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0006_inventory'),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name='Inventory',\n        ),\n    ]",
        "detail": "webapp.migrations.0007_delete_inventory",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0008_inventory",
        "description": "webapp.migrations.0008_inventory",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0007_delete_inventory'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Inventory',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('item_name', models.CharField(max_length=300)),",
        "detail": "webapp.migrations.0008_inventory",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0009_alter_inventory_options",
        "description": "webapp.migrations.0009_alter_inventory_options",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0008_inventory'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='inventory',\n            options={'ordering': ['-create_at']},\n        ),\n    ]",
        "detail": "webapp.migrations.0009_alter_inventory_options",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0010_reserve_branch_reserve_status",
        "description": "webapp.migrations.0010_reserve_branch_reserve_status",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0009_alter_inventory_options'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='reserve',\n            name='Branch',\n            field=models.CharField(choices=[('EL-Mohandsen', 'EL-Mohandsen'), ('5th sattelment', '5th sattelment'), ('Naser-city', 'Naser-city')], default='Branch', max_length=50),\n        ),",
        "detail": "webapp.migrations.0010_reserve_branch_reserve_status",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0011_medical_history",
        "description": "webapp.migrations.0011_medical_history",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0010_reserve_branch_reserve_status'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Medical_History',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('medical_notes', models.CharField(max_length=1000)),",
        "detail": "webapp.migrations.0011_medical_history",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0012_alter_reserve_name",
        "description": "webapp.migrations.0012_alter_reserve_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0011_medical_history'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='reserve',\n            name='name',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='webapp.patient'),\n        ),",
        "detail": "webapp.migrations.0012_alter_reserve_name",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0013_delete_inventory",
        "description": "webapp.migrations.0013_delete_inventory",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0012_alter_reserve_name'),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name='Inventory',\n        ),\n    ]",
        "detail": "webapp.migrations.0013_delete_inventory",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0014_companies_inventory",
        "description": "webapp.migrations.0014_companies_inventory",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0013_delete_inventory'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Companies',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('company_name', models.CharField(max_length=255)),",
        "detail": "webapp.migrations.0014_companies_inventory",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0015_remove_inventory_company_source_delete_companies_and_more",
        "description": "webapp.migrations.0015_remove_inventory_company_source_delete_companies_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0014_companies_inventory'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='inventory',\n            name='company_source',\n        ),\n        migrations.DeleteModel(",
        "detail": "webapp.migrations.0015_remove_inventory_company_source_delete_companies_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0016_companies_inventory_invoice_payment",
        "description": "webapp.migrations.0016_companies_inventory_invoice_payment",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0015_remove_inventory_company_source_delete_companies_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Companies',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('company_name', models.CharField(max_length=255)),",
        "detail": "webapp.migrations.0016_companies_inventory_invoice_payment",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0017_delete_payment",
        "description": "webapp.migrations.0017_delete_payment",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0016_companies_inventory_invoice_payment'),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name='Payment',\n        ),\n    ]",
        "detail": "webapp.migrations.0017_delete_payment",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0018_payment",
        "description": "webapp.migrations.0018_payment",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0017_delete_payment'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Payment',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('patient', models.CharField(max_length=300)),",
        "detail": "webapp.migrations.0018_payment",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0019_remove_reserve_birth",
        "description": "webapp.migrations.0019_remove_reserve_birth",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0018_payment'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='reserve',\n            name='birth',\n        ),\n    ]",
        "detail": "webapp.migrations.0019_remove_reserve_birth",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0020_alter_patient_date_of_birth",
        "description": "webapp.migrations.0020_alter_patient_date_of_birth",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0019_remove_reserve_birth'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='patient',\n            name='date_of_birth',\n            field=models.DateField(blank=True, null=True),\n        ),",
        "detail": "webapp.migrations.0020_alter_patient_date_of_birth",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0021_service_remove_payment_payment_date_and_more",
        "description": "webapp.migrations.0021_service_remove_payment_payment_date_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0020_alter_patient_date_of_birth'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Service',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),",
        "detail": "webapp.migrations.0021_service_remove_payment_payment_date_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0022_reserve_service",
        "description": "webapp.migrations.0022_reserve_service",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0021_service_remove_payment_payment_date_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='reserve',\n            name='service',\n            field=models.CharField(choices=[('Service', 'Service'), ('Consultation', 'Consultation'), ('Retouch', 'Retouch')], default='Service type', max_length=50),\n        ),",
        "detail": "webapp.migrations.0022_reserve_service",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0023_remove_inventory_company_source_and_more",
        "description": "webapp.migrations.0023_remove_inventory_company_source_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0022_reserve_service'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='inventory',\n            name='company_source',\n        ),\n        migrations.RemoveField(",
        "detail": "webapp.migrations.0023_remove_inventory_company_source_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0024_companies_service_inventory_invoice_medical_history_and_more",
        "description": "webapp.migrations.0024_companies_service_inventory_invoice_medical_history_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0023_remove_inventory_company_source_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Companies',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('company_name', models.CharField(max_length=255)),",
        "detail": "webapp.migrations.0024_companies_service_inventory_invoice_medical_history_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0025_remove_paymentservice_payment_and_more",
        "description": "webapp.migrations.0025_remove_paymentservice_payment_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0024_companies_service_inventory_invoice_medical_history_and_more'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='paymentservice',\n            name='payment',\n        ),\n        migrations.RemoveField(",
        "detail": "webapp.migrations.0025_remove_paymentservice_payment_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0026_payment",
        "description": "webapp.migrations.0026_payment",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0025_remove_paymentservice_payment_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Payment',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('created_at', models.DateTimeField(auto_now_add=True)),",
        "detail": "webapp.migrations.0026_payment",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0027_remove_payment_inventory_and_more",
        "description": "webapp.migrations.0027_remove_payment_inventory_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0026_payment'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='payment',\n            name='inventory',\n        ),\n        migrations.RemoveField(",
        "detail": "webapp.migrations.0027_remove_payment_inventory_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0028_activitylog_profile",
        "description": "webapp.migrations.0028_activitylog_profile",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0027_remove_payment_inventory_and_more'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ActivityLog',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "webapp.migrations.0028_activitylog_profile",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0029_remove_profile_user_delete_activitylog_and_more",
        "description": "webapp.migrations.0029_remove_profile_user_delete_activitylog_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0028_activitylog_profile'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='profile',\n            name='user',\n        ),\n        migrations.DeleteModel(",
        "detail": "webapp.migrations.0029_remove_profile_user_delete_activitylog_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0030_useractivity",
        "description": "webapp.migrations.0030_useractivity",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0029_remove_profile_user_delete_activitylog_and_more'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='UserActivity',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "webapp.migrations.0030_useractivity",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0031_delete_useractivity",
        "description": "webapp.migrations.0031_delete_useractivity",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0030_useractivity'),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name='UserActivity',\n        ),\n    ]",
        "detail": "webapp.migrations.0031_delete_useractivity",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0032_useractivity",
        "description": "webapp.migrations.0032_useractivity",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0031_delete_useractivity'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='UserActivity',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "webapp.migrations.0032_useractivity",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0033_delete_useractivity",
        "description": "webapp.migrations.0033_delete_useractivity",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0032_useractivity'),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name='UserActivity',\n        ),\n    ]",
        "detail": "webapp.migrations.0033_delete_useractivity",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0034_useractivity",
        "description": "webapp.migrations.0034_useractivity",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0033_delete_useractivity'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='UserActivity',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "webapp.migrations.0034_useractivity",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0035_paymentservice_price_at_time_of_payment",
        "description": "webapp.migrations.0035_paymentservice_price_at_time_of_payment",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0034_useractivity'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='paymentservice',\n            name='price_at_time_of_payment',\n            field=models.DecimalField(decimal_places=2, default=0, max_digits=10),\n        ),",
        "detail": "webapp.migrations.0035_paymentservice_price_at_time_of_payment",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0036_paymentinventory_price_at_time_of_payment",
        "description": "webapp.migrations.0036_paymentinventory_price_at_time_of_payment",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0035_paymentservice_price_at_time_of_payment'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='paymentinventory',\n            name='price_at_time_of_payment',\n            field=models.DecimalField(decimal_places=2, default=0, max_digits=10),\n        ),",
        "detail": "webapp.migrations.0036_paymentinventory_price_at_time_of_payment",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0037_alter_payment_patient",
        "description": "webapp.migrations.0037_alter_payment_patient",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0036_paymentinventory_price_at_time_of_payment'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='payment',\n            name='patient',\n            field=models.CharField(max_length=20),\n        ),",
        "detail": "webapp.migrations.0037_alter_payment_patient",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0038_alter_reserve_branch",
        "description": "webapp.migrations.0038_alter_reserve_branch",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0037_alter_payment_patient'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='reserve',\n            name='Branch',\n            field=models.CharField(choices=[('EL_Mohandsen', 'EL_Mohandsen'), ('5th_sattelment', '5th_sattelment'), ('Naser_city', 'Naser_city')], default='Branch', max_length=50),\n        ),",
        "detail": "webapp.migrations.0038_alter_reserve_branch",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0039_alter_payment_method",
        "description": "webapp.migrations.0039_alter_payment_method",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0038_alter_reserve_branch'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='payment',\n            name='method',\n            field=models.CharField(choices=[('INSTAPAY', 'INSTAPAY'), ('CASH', 'CASH'), ('CREDIT CARD', 'CREDIT CARD'), ('E_WALLET', 'E_WALLET')], default='CASH', max_length=100),\n        ),",
        "detail": "webapp.migrations.0039_alter_payment_method",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0040_invoice_due_dates_invoice_is_fully_paid_and_more",
        "description": "webapp.migrations.0040_invoice_due_dates_invoice_is_fully_paid_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0039_alter_payment_method'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='invoice',\n            name='due_dates',\n            field=models.JSONField(blank=True, null=True),\n        ),",
        "detail": "webapp.migrations.0040_invoice_due_dates_invoice_is_fully_paid_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0041_payment_branch",
        "description": "webapp.migrations.0041_payment_branch",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0040_invoice_due_dates_invoice_is_fully_paid_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='payment',\n            name='Branch',\n            field=models.CharField(choices=[('EL_Mohandsen', 'EL_Mohandsen'), ('5th_sattelment', '5th_sattelment'), ('Naser_city', 'Naser_city')], default='Branch', max_length=50),\n        ),",
        "detail": "webapp.migrations.0041_payment_branch",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0042_reserve_type",
        "description": "webapp.migrations.0042_reserve_type",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0041_payment_branch'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='reserve',\n            name='type',\n            field=models.CharField(choices=[('old', 'old'), ('new', 'new')], default='old or new', max_length=100),\n        ),",
        "detail": "webapp.migrations.0042_reserve_type",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0043_alter_reserve_phone_remove_reserve_service_and_more",
        "description": "webapp.migrations.0043_alter_reserve_phone_remove_reserve_service_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0042_reserve_type'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='reserve',\n            name='phone',\n            field=models.CharField(max_length=100),\n        ),",
        "detail": "webapp.migrations.0043_alter_reserve_phone_remove_reserve_service_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0044_reserve_service_details",
        "description": "webapp.migrations.0044_reserve_service_details",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0043_alter_reserve_phone_remove_reserve_service_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='reserve',\n            name='service_details',\n            field=models.JSONField(blank=True, null=True),\n        ),",
        "detail": "webapp.migrations.0044_reserve_service_details",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0045_remove_reserve_name_reserve_patient_name_and_more",
        "description": "webapp.migrations.0045_remove_reserve_name_reserve_patient_name_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0044_reserve_service_details'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='reserve',\n            name='name',\n        ),\n        migrations.AddField(",
        "detail": "webapp.migrations.0045_remove_reserve_name_reserve_patient_name_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0046_remove_reserve_service_details_and_more",
        "description": "webapp.migrations.0046_remove_reserve_service_details_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0045_remove_reserve_name_reserve_patient_name_and_more'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='reserve',\n            name='service_details',\n        ),\n        migrations.RemoveField(",
        "detail": "webapp.migrations.0046_remove_reserve_service_details_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0047_reserve_notes_alter_reserve_service",
        "description": "webapp.migrations.0047_reserve_notes_alter_reserve_service",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0046_remove_reserve_service_details_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='reserve',\n            name='notes',\n            field=models.CharField(default='notes', max_length=1000),\n        ),",
        "detail": "webapp.migrations.0047_reserve_notes_alter_reserve_service",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0048_alter_reserve_time",
        "description": "webapp.migrations.0048_alter_reserve_time",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0047_reserve_notes_alter_reserve_service'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='reserve',\n            name='time',\n            field=models.CharField(max_length=10),\n        ),",
        "detail": "webapp.migrations.0048_alter_reserve_time",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0049_alter_patient_phone",
        "description": "webapp.migrations.0049_alter_patient_phone",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0048_alter_reserve_time'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='patient',\n            name='phone',\n            field=models.CharField(max_length=20),\n        ),",
        "detail": "webapp.migrations.0049_alter_patient_phone",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0050_delete_category_delete_record_patient_country_and_more",
        "description": "webapp.migrations.0050_delete_category_delete_record_patient_country_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0049_alter_patient_phone'),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name='Category',\n        ),\n        migrations.DeleteModel(\n            name='Record',",
        "detail": "webapp.migrations.0050_delete_category_delete_record_patient_country_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0051_alter_payment_patient_remove_reserve_service_and_more",
        "description": "webapp.migrations.0051_alter_payment_patient_remove_reserve_service_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0050_delete_category_delete_record_patient_country_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='payment',\n            name='patient',\n            field=models.CharField(max_length=100),\n        ),",
        "detail": "webapp.migrations.0051_alter_payment_patient_remove_reserve_service_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0052_rename_service_reserve_services",
        "description": "webapp.migrations.0052_rename_service_reserve_services",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0051_alter_payment_patient_remove_reserve_service_and_more'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='reserve',\n            old_name='service',\n            new_name='services',\n        ),",
        "detail": "webapp.migrations.0052_rename_service_reserve_services",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0053_remove_reserve_services_reservationservice",
        "description": "webapp.migrations.0053_remove_reserve_services_reservationservice",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0052_rename_service_reserve_services'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='reserve',\n            name='services',\n        ),\n        migrations.CreateModel(",
        "detail": "webapp.migrations.0053_remove_reserve_services_reservationservice",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0054_offer_alter_paymentinventory_payment_and_more",
        "description": "webapp.migrations.0054_offer_alter_paymentinventory_payment_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0053_remove_reserve_services_reservationservice'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Offer',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),",
        "detail": "webapp.migrations.0054_offer_alter_paymentinventory_payment_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0055_remove_payment_offer_alter_paymentinventory_payment_and_more",
        "description": "webapp.migrations.0055_remove_payment_offer_alter_paymentinventory_payment_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0054_offer_alter_paymentinventory_payment_and_more'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='payment',\n            name='offer',\n        ),\n        migrations.AlterField(",
        "detail": "webapp.migrations.0055_remove_payment_offer_alter_paymentinventory_payment_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0056_offers",
        "description": "webapp.migrations.0056_offers",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0055_remove_payment_offer_alter_paymentinventory_payment_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='offers',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('offer_name', models.CharField(max_length=250)),",
        "detail": "webapp.migrations.0056_offers",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0057_remove_companies_total_due_and_more",
        "description": "webapp.migrations.0057_remove_companies_total_due_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0056_offers'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='companies',\n            name='total_due',\n        ),\n        migrations.RemoveField(",
        "detail": "webapp.migrations.0057_remove_companies_total_due_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0058_invoice_installments_count_invoice_remaining_amount_and_more",
        "description": "webapp.migrations.0058_invoice_installments_count_invoice_remaining_amount_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0057_remove_companies_total_due_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='invoice',\n            name='installments_count',\n            field=models.IntegerField(blank=True, null=True),\n        ),",
        "detail": "webapp.migrations.0058_invoice_installments_count_invoice_remaining_amount_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0059_rename_purchase_date_invoice_create_at",
        "description": "webapp.migrations.0059_rename_purchase_date_invoice_create_at",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0058_invoice_installments_count_invoice_remaining_amount_and_more'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='invoice',\n            old_name='purchase_date',\n            new_name='create_at',\n        ),",
        "detail": "webapp.migrations.0059_rename_purchase_date_invoice_create_at",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0060_rename_create_at_invoice_created_at",
        "description": "webapp.migrations.0060_rename_create_at_invoice_created_at",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0059_rename_purchase_date_invoice_create_at'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='invoice',\n            old_name='create_at',\n            new_name='created_at',\n        ),",
        "detail": "webapp.migrations.0060_rename_create_at_invoice_created_at",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0061_alter_reserve_options_and_more",
        "description": "webapp.migrations.0061_alter_reserve_options_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0060_rename_create_at_invoice_created_at'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='reserve',\n            options={'ordering': ['-created_at']},\n        ),\n        migrations.RenameField(",
        "detail": "webapp.migrations.0061_alter_reserve_options_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0062_paymentinventory_created_at_and_more",
        "description": "webapp.migrations.0062_paymentinventory_created_at_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0061_alter_reserve_options_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='paymentinventory',\n            name='created_at',\n            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),\n            preserve_default=False,",
        "detail": "webapp.migrations.0062_paymentinventory_created_at_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0063_finance",
        "description": "webapp.migrations.0063_finance",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0062_paymentinventory_created_at_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Finance',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('transaction_type', models.CharField(choices=[('Income', 'Income'), ('Expense', 'Expense'), ('Refund', 'Refund')], max_length=20)),",
        "detail": "webapp.migrations.0063_finance",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0064_inventory_item_price",
        "description": "webapp.migrations.0064_inventory_item_price",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0063_finance'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='inventory',\n            name='item_price',\n            field=models.DecimalField(decimal_places=2, default=0, max_digits=10),\n        ),",
        "detail": "webapp.migrations.0064_inventory_item_price",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0065_payment_offer_payment_type",
        "description": "webapp.migrations.0065_payment_offer_payment_type",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0064_inventory_item_price'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='payment',\n            name='offer',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='webapp.offers'),\n        ),",
        "detail": "webapp.migrations.0065_payment_offer_payment_type",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0066_offers_discount_amount_offers_valid_from_and_more",
        "description": "webapp.migrations.0066_offers_discount_amount_offers_valid_from_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0065_payment_offer_payment_type'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='offers',\n            name='discount_amount',\n            field=models.DecimalField(blank=True, decimal_places=2, help_text='Enter the fixed discount amount (e.g., 100 for 100 EGP). Leave blank if using percentage.', max_digits=10, null=True),\n        ),",
        "detail": "webapp.migrations.0066_offers_discount_amount_offers_valid_from_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0067_rename_offer_name_offers_name_and_more",
        "description": "webapp.migrations.0067_rename_offer_name_offers_name_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0066_offers_discount_amount_offers_valid_from_and_more'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='offers',\n            old_name='offer_name',\n            new_name='name',\n        ),",
        "detail": "webapp.migrations.0067_rename_offer_name_offers_name_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0068_remove_payment_offer",
        "description": "webapp.migrations.0068_remove_payment_offer",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0067_rename_offer_name_offers_name_and_more'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='payment',\n            name='offer',\n        ),\n    ]",
        "detail": "webapp.migrations.0068_remove_payment_offer",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0069_alter_patient_options_and_more",
        "description": "webapp.migrations.0069_alter_patient_options_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0068_remove_payment_offer'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='patient',\n            options={'ordering': ['-created_at']},\n        ),\n        migrations.RenameField(",
        "detail": "webapp.migrations.0069_alter_patient_options_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0070_alter_payment_options_finance_total_amount",
        "description": "webapp.migrations.0070_alter_payment_options_finance_total_amount",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0069_alter_patient_options_and_more'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='payment',\n            options={'ordering': ['-created_at']},\n        ),\n        migrations.AddField(",
        "detail": "webapp.migrations.0070_alter_payment_options_finance_total_amount",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0071_remove_finance_total_amount",
        "description": "webapp.migrations.0071_remove_finance_total_amount",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0070_alter_payment_options_finance_total_amount'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='finance',\n            name='total_amount',\n        ),\n    ]",
        "detail": "webapp.migrations.0071_remove_finance_total_amount",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0072_finance_total_amount",
        "description": "webapp.migrations.0072_finance_total_amount",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0071_remove_finance_total_amount'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='finance',\n            name='total_amount',\n            field=models.DecimalField(decimal_places=2, default=0, max_digits=15),\n        ),",
        "detail": "webapp.migrations.0072_finance_total_amount",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0073_remove_finance_total_amount",
        "description": "webapp.migrations.0073_remove_finance_total_amount",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0072_finance_total_amount'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='finance',\n            name='total_amount',\n        ),\n    ]",
        "detail": "webapp.migrations.0073_remove_finance_total_amount",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0074_alter_finance_options_remove_patient_last_visit",
        "description": "webapp.migrations.0074_alter_finance_options_remove_patient_last_visit",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0073_remove_finance_total_amount'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='finance',\n            options={'ordering': ['-created_at']},\n        ),\n        migrations.RemoveField(",
        "detail": "webapp.migrations.0074_alter_finance_options_remove_patient_last_visit",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0075_useditem",
        "description": "webapp.migrations.0075_useditem",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0074_alter_finance_options_remove_patient_last_visit'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='UsedItem',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('quantity_used', models.IntegerField()),",
        "detail": "webapp.migrations.0075_useditem",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0076_reservationinventory",
        "description": "webapp.migrations.0076_reservationinventory",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0075_useditem'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ReservationInventory',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('inventory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='webapp.inventory')),",
        "detail": "webapp.migrations.0076_reservationinventory",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0077_payment_date_alter_reserve_date",
        "description": "webapp.migrations.0077_payment_date_alter_reserve_date",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0076_reservationinventory'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='payment',\n            name='date',\n            field=models.DateField(blank=True, default=django.utils.timezone.now, null=True),\n        ),",
        "detail": "webapp.migrations.0077_payment_date_alter_reserve_date",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0078_finance_date",
        "description": "webapp.migrations.0078_finance_date",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0077_payment_date_alter_reserve_date'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='finance',\n            name='date',\n            field=models.DateField(default=django.utils.timezone.now),\n        ),",
        "detail": "webapp.migrations.0078_finance_date",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0079_reserve_services",
        "description": "webapp.migrations.0079_reserve_services",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0078_finance_date'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='reserve',\n            name='services',\n            field=models.JSONField(default=list),\n        ),",
        "detail": "webapp.migrations.0079_reserve_services",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0080_alter_reserve_services",
        "description": "webapp.migrations.0080_alter_reserve_services",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0079_reserve_services'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='reserve',\n            name='services',\n            field=models.JSONField(choices=[('SKINBOOSTER', 'Skinbooster'), ('FILLER', 'Filler'), ('DISSOLVING_FILLER', 'Dissolving Filler'), ('BOTOX', 'Botox'), ('RETOUCH', 'Retouch'), ('CONSULTATION', 'Consultation'), ('DERMA_PEN', 'Derma Pen'), ('LIP_FILLER', 'Lip Filler'), ('MESOTHERAPY', 'Mesotherapy')], default=list),\n        ),",
        "detail": "webapp.migrations.0080_alter_reserve_services",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0081_alter_reserve_services",
        "description": "webapp.migrations.0081_alter_reserve_services",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0080_alter_reserve_services'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='reserve',\n            name='services',\n            field=models.JSONField(default=list),\n        ),",
        "detail": "webapp.migrations.0081_alter_reserve_services",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "webapp.migrations.0082_alter_reserve_services",
        "description": "webapp.migrations.0082_alter_reserve_services",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('webapp', '0081_alter_reserve_services'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='reserve',\n            name='services',\n            field=models.CharField(default=list, max_length=1000),\n        ),",
        "detail": "webapp.migrations.0082_alter_reserve_services",
        "documentation": {}
    },
    {
        "label": "patientAdmin",
        "kind": 6,
        "importPath": "webapp.admin",
        "description": "webapp.admin",
        "peekOfCode": "class patientAdmin(admin.ModelAdmin):\n    pass \n@admin.register(Reserve)\nclass ReserveAdmin(admin.ModelAdmin):\n    pass\n@admin.register(offers)\nclass offersAdmin(admin.ModelAdmin):\n    pass\n# تسجيل نموذج Companies\nclass CompaniesAdmin(admin.ModelAdmin):",
        "detail": "webapp.admin",
        "documentation": {}
    },
    {
        "label": "ReserveAdmin",
        "kind": 6,
        "importPath": "webapp.admin",
        "description": "webapp.admin",
        "peekOfCode": "class ReserveAdmin(admin.ModelAdmin):\n    pass\n@admin.register(offers)\nclass offersAdmin(admin.ModelAdmin):\n    pass\n# تسجيل نموذج Companies\nclass CompaniesAdmin(admin.ModelAdmin):\n    list_display = ('company_name', 'company_address', 'company_phone')\n    search_fields = ('company_name', 'company_phone')\n# تسجيل نموذج Inventory",
        "detail": "webapp.admin",
        "documentation": {}
    },
    {
        "label": "offersAdmin",
        "kind": 6,
        "importPath": "webapp.admin",
        "description": "webapp.admin",
        "peekOfCode": "class offersAdmin(admin.ModelAdmin):\n    pass\n# تسجيل نموذج Companies\nclass CompaniesAdmin(admin.ModelAdmin):\n    list_display = ('company_name', 'company_address', 'company_phone')\n    search_fields = ('company_name', 'company_phone')\n# تسجيل نموذج Inventory\nclass InventoryAdmin(admin.ModelAdmin):\n    list_display = ('item_name', 'item_quantity',  'item_cost', 'company_source', 'created_at')\n    search_fields = ('item_name', 'company_source__company_name')",
        "detail": "webapp.admin",
        "documentation": {}
    },
    {
        "label": "CompaniesAdmin",
        "kind": 6,
        "importPath": "webapp.admin",
        "description": "webapp.admin",
        "peekOfCode": "class CompaniesAdmin(admin.ModelAdmin):\n    list_display = ('company_name', 'company_address', 'company_phone')\n    search_fields = ('company_name', 'company_phone')\n# تسجيل نموذج Inventory\nclass InventoryAdmin(admin.ModelAdmin):\n    list_display = ('item_name', 'item_quantity',  'item_cost', 'company_source', 'created_at')\n    search_fields = ('item_name', 'company_source__company_name')\n    list_filter = ('company_source', 'created_at')\n# تسجيل نموذج Service\nclass ServiceAdmin(admin.ModelAdmin):",
        "detail": "webapp.admin",
        "documentation": {}
    },
    {
        "label": "InventoryAdmin",
        "kind": 6,
        "importPath": "webapp.admin",
        "description": "webapp.admin",
        "peekOfCode": "class InventoryAdmin(admin.ModelAdmin):\n    list_display = ('item_name', 'item_quantity',  'item_cost', 'company_source', 'created_at')\n    search_fields = ('item_name', 'company_source__company_name')\n    list_filter = ('company_source', 'created_at')\n# تسجيل نموذج Service\nclass ServiceAdmin(admin.ModelAdmin):\n    list_display = ('name', 'price')\n    search_fields = ('name',)\n# تسجيل نموذج PaymentService كـ Inline لتضمينه في Payment\nclass PaymentServiceInline(admin.TabularInline):",
        "detail": "webapp.admin",
        "documentation": {}
    },
    {
        "label": "ServiceAdmin",
        "kind": 6,
        "importPath": "webapp.admin",
        "description": "webapp.admin",
        "peekOfCode": "class ServiceAdmin(admin.ModelAdmin):\n    list_display = ('name', 'price')\n    search_fields = ('name',)\n# تسجيل نموذج PaymentService كـ Inline لتضمينه في Payment\nclass PaymentServiceInline(admin.TabularInline):\n    model = PaymentService\n    extra = 1\n# تسجيل نموذج PaymentInventory كـ Inline لتضمينه في Payment\nclass PaymentInventoryInline(admin.TabularInline):\n    model = PaymentInventory",
        "detail": "webapp.admin",
        "documentation": {}
    },
    {
        "label": "PaymentServiceInline",
        "kind": 6,
        "importPath": "webapp.admin",
        "description": "webapp.admin",
        "peekOfCode": "class PaymentServiceInline(admin.TabularInline):\n    model = PaymentService\n    extra = 1\n# تسجيل نموذج PaymentInventory كـ Inline لتضمينه في Payment\nclass PaymentInventoryInline(admin.TabularInline):\n    model = PaymentInventory\n    extra = 1\n# تسجيل نموذج Payment مع Inline للخدمات والمنتجات\nclass PaymentAdmin(admin.ModelAdmin):\n    list_display = ('patient', 'created_at', 'status', 'method', 'get_total_amount')",
        "detail": "webapp.admin",
        "documentation": {}
    },
    {
        "label": "PaymentInventoryInline",
        "kind": 6,
        "importPath": "webapp.admin",
        "description": "webapp.admin",
        "peekOfCode": "class PaymentInventoryInline(admin.TabularInline):\n    model = PaymentInventory\n    extra = 1\n# تسجيل نموذج Payment مع Inline للخدمات والمنتجات\nclass PaymentAdmin(admin.ModelAdmin):\n    list_display = ('patient', 'created_at', 'status', 'method', 'get_total_amount')\n    search_fields = ('patient__name',)\n    list_filter = ('status', 'method')\n    inlines = [PaymentServiceInline, PaymentInventoryInline]  # تضمين النماذج الفرعية للخدمات والمنتجات\n# تسجيل نموذج Invoice",
        "detail": "webapp.admin",
        "documentation": {}
    },
    {
        "label": "PaymentAdmin",
        "kind": 6,
        "importPath": "webapp.admin",
        "description": "webapp.admin",
        "peekOfCode": "class PaymentAdmin(admin.ModelAdmin):\n    list_display = ('patient', 'created_at', 'status', 'method', 'get_total_amount')\n    search_fields = ('patient__name',)\n    list_filter = ('status', 'method')\n    inlines = [PaymentServiceInline, PaymentInventoryInline]  # تضمين النماذج الفرعية للخدمات والمنتجات\n# تسجيل نموذج Invoice\nclass InvoiceAdmin(admin.ModelAdmin):\n    list_display = ['company', 'item', 'total_cost', 'payment_method', 'is_fully_paid', 'remaining_amount']\n    list_filter = ['payment_method', 'is_fully_paid']\n    search_fields = ['company__company_name', 'item__item_name']",
        "detail": "webapp.admin",
        "documentation": {}
    },
    {
        "label": "InvoiceAdmin",
        "kind": 6,
        "importPath": "webapp.admin",
        "description": "webapp.admin",
        "peekOfCode": "class InvoiceAdmin(admin.ModelAdmin):\n    list_display = ['company', 'item', 'total_cost', 'payment_method', 'is_fully_paid', 'remaining_amount']\n    list_filter = ['payment_method', 'is_fully_paid']\n    search_fields = ['company__company_name', 'item__item_name']\n    readonly_fields = ['total_paid', 'remaining_amount', 'due_dates', 'payments']\n# تسجيل نموذج Medical_History\nclass MedicalHistoryAdmin(admin.ModelAdmin):\n    list_display = ('patient', 'medical_notes')\n    search_fields = ('patient__name',)\n# تسجيل النماذج في لوحة تحكم Django",
        "detail": "webapp.admin",
        "documentation": {}
    },
    {
        "label": "MedicalHistoryAdmin",
        "kind": 6,
        "importPath": "webapp.admin",
        "description": "webapp.admin",
        "peekOfCode": "class MedicalHistoryAdmin(admin.ModelAdmin):\n    list_display = ('patient', 'medical_notes')\n    search_fields = ('patient__name',)\n# تسجيل النماذج في لوحة تحكم Django\nadmin.site.register(Companies, CompaniesAdmin)\nadmin.site.register(Inventory, InventoryAdmin)\nadmin.site.register(Service, ServiceAdmin)\nadmin.site.register(Payment, PaymentAdmin)\nadmin.site.register(Invoice, InvoiceAdmin)\nadmin.site.register(Medical_History, MedicalHistoryAdmin)",
        "detail": "webapp.admin",
        "documentation": {}
    },
    {
        "label": "WebappConfig",
        "kind": 6,
        "importPath": "webapp.apps",
        "description": "webapp.apps",
        "peekOfCode": "class WebappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'webapp'\n    def ready(self):\n        import webapp.signals  # تأكد من أن هذا الاستيراد صحيح",
        "detail": "webapp.apps",
        "documentation": {}
    },
    {
        "label": "CreateUserForm",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class CreateUserForm(UserCreationForm):\n    class meta :\n        model = User\n        fields = ['username','password1','password2']\nclass loginForm(AuthenticationForm):\n    username = forms.CharField(widget=TextInput())\n    password = forms.CharField(widget=PasswordInput())\nclass patient_form(forms.ModelForm):\n    class Meta: \n        model = patient",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "loginForm",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class loginForm(AuthenticationForm):\n    username = forms.CharField(widget=TextInput())\n    password = forms.CharField(widget=PasswordInput())\nclass patient_form(forms.ModelForm):\n    class Meta: \n        model = patient\n        fields =  fields = ['name','country', 'date_of_birth', 'phone','address', 'how_did_you_know_us' ]\nclass patient_form_edit(forms.ModelForm):\n    class Meta: \n        model = patient",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "patient_form",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class patient_form(forms.ModelForm):\n    class Meta: \n        model = patient\n        fields =  fields = ['name','country', 'date_of_birth', 'phone','address', 'how_did_you_know_us' ]\nclass patient_form_edit(forms.ModelForm):\n    class Meta: \n        model = patient\n        fields =  fields = ['name','country', 'date_of_birth', 'phone','address', 'how_did_you_know_us' ]\nclass ReserveForm(forms.ModelForm):\n    services = forms.CharField(",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "patient_form_edit",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class patient_form_edit(forms.ModelForm):\n    class Meta: \n        model = patient\n        fields =  fields = ['name','country', 'date_of_birth', 'phone','address', 'how_did_you_know_us' ]\nclass ReserveForm(forms.ModelForm):\n    services = forms.CharField(\n        widget=forms.HiddenInput(attrs={'data-role': 'services-input'}),\n        required=True\n    )\n    date = forms.DateField(",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "ReserveForm",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class ReserveForm(forms.ModelForm):\n    services = forms.CharField(\n        widget=forms.HiddenInput(attrs={'data-role': 'services-input'}),\n        required=True\n    )\n    date = forms.DateField(\n        widget=forms.TextInput(attrs={\n            'class': 'form-control flatpickr-date',\n            'placeholder': 'Select date'\n        }),",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "CompanyForm",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class CompanyForm(forms.ModelForm):\n    class Meta:\n        model = Companies\n        fields = ['company_name', 'company_address', 'company_phone']\nclass InventoryForm(forms.ModelForm):\n    class Meta:\n        model = Inventory\n        fields = ['item_name', 'item_quantity', 'item_cost','item_price', 'company_source']\nclass ServiceForm(forms.ModelForm):\n    class Meta:",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "InventoryForm",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class InventoryForm(forms.ModelForm):\n    class Meta:\n        model = Inventory\n        fields = ['item_name', 'item_quantity', 'item_cost','item_price', 'company_source']\nclass ServiceForm(forms.ModelForm):\n    class Meta:\n        model = Service\n        fields = ['name', 'price']\nfrom django import forms\nfrom django.forms import inlineformset_factory",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "ServiceForm",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class ServiceForm(forms.ModelForm):\n    class Meta:\n        model = Service\n        fields = ['name', 'price']\nfrom django import forms\nfrom django.forms import inlineformset_factory\nfrom .models import Payment, PaymentService, PaymentInventory\nclass PaymentForm(forms.ModelForm):\n    \"\"\"Form for creating and updating Payment instances.\"\"\"\n    date = forms.DateField(",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "PaymentForm",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class PaymentForm(forms.ModelForm):\n    \"\"\"Form for creating and updating Payment instances.\"\"\"\n    date = forms.DateField(\n        widget=forms.TextInput(attrs={\n            'class': 'form-control flatpickr-date',\n            'placeholder': 'Select date'\n        }),\n        label='Date'\n    )\n    class Meta:",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "PaymentServiceForm",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class PaymentServiceForm(forms.ModelForm):\n    class Meta:\n        model = PaymentService\n        fields = ['service', 'quantity', ]\n        widgets = {\n            'service': forms.Select(attrs={'class': 'form-control'}),\n            'quantity': forms.NumberInput(attrs={'class': 'form-control', 'min': 0}),\n            'price_at_time_of_payment': forms.NumberInput(attrs={'class': 'form-control', 'step': '0.01'}),\n        }\n        help_texts = {",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "PaymentInventoryForm",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class PaymentInventoryForm(forms.ModelForm):\n    class Meta:\n        model = PaymentInventory\n        fields = ['inventory', 'quantity', ]\n        widgets = {\n            'inventory': forms.Select(attrs={'class': 'form-control'}),\n            'quantity': forms.NumberInput(attrs={'class': 'form-control', 'min': 0}),\n            'price_at_time_of_payment': forms.NumberInput(attrs={'class': 'form-control', 'step': '0.01'}),\n        }\n        help_texts = {",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "InvoiceForm",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class InvoiceForm(forms.ModelForm):\n    class Meta:\n        model = Invoice\n        fields = ['company', 'item', 'quantity_purchased', 'total_cost', \n                  'payment_method', 'installments_count']\n    def clean(self):\n        cleaned_data = super().clean()\n        payment_method = cleaned_data.get('payment_method')\n        installments_count = cleaned_data.get('installments_count')\n        if payment_method == 'Installments' and (not installments_count or installments_count <= 0):",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "MedicalHistoryForm",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class MedicalHistoryForm(forms.ModelForm):\n    class Meta:\n        model = Medical_History\n        fields = ['medical_notes']  # تأكد من عدم إدراج المريض هنا، سيتم تعيينه في الفيو                                 \nclass ServiceForm(forms.ModelForm):\n    class Meta:\n        model = Service\n        fields = ['name', 'price']        \nclass OfferForm(forms.ModelForm):\n    class Meta:",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "ServiceForm",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class ServiceForm(forms.ModelForm):\n    class Meta:\n        model = Service\n        fields = ['name', 'price']        \nclass OfferForm(forms.ModelForm):\n    class Meta:\n        model = offers\n        fields = ['name', 'valid_from', 'valid_to']\n    valid_from = forms.DateField(\n        widget=forms.DateInput(attrs={'class': 'date-picker', 'placeholder': 'Select start date'}),",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "OfferForm",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class OfferForm(forms.ModelForm):\n    class Meta:\n        model = offers\n        fields = ['name', 'valid_from', 'valid_to']\n    valid_from = forms.DateField(\n        widget=forms.DateInput(attrs={'class': 'date-picker', 'placeholder': 'Select start date'}),\n        required=True\n    )\n    valid_to = forms.DateField(\n        widget=forms.DateInput(attrs={'class': 'date-picker', 'placeholder': 'Select end date'}),",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "OfferServiceForm",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class OfferServiceForm(forms.ModelForm):\n    class Meta:\n        model = OfferService\n        fields = ['service', 'discount_percentage', 'discount_amount']\n    service = forms.ModelChoiceField(\n        queryset=Service.objects.all(),\n        widget=Select2Widget(attrs={'placeholder': 'Search for a service...'}),\n        required=True\n    )\n    discount_percentage = forms.DecimalField(",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "OfferInventoryForm",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class OfferInventoryForm(forms.ModelForm):\n    class Meta:\n        model = OfferInventory\n        fields = ['inventory', 'discount_percentage', 'discount_amount']\n    inventory = forms.ModelChoiceField(\n        queryset=Inventory.objects.all(),\n        widget=Select2Widget(attrs={'placeholder': 'Search for an inventory item...'}),\n        required=True\n    )\n    discount_percentage = forms.DecimalField(",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "FinanceForm",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class FinanceForm(forms.ModelForm):\n    class Meta:\n        model = Finance\n        fields = ['transaction_type', 'amount', 'description', 'related_payment', 'related_invoice']\n        widgets = {\n            'description': forms.Textarea(attrs={'rows': 3}),\n            'transaction_type': forms.Select(attrs={'class': 'form-control'}),\n            'amount': forms.NumberInput(attrs={'class': 'form-control', 'step': '0.01'}),\n            'related_payment': forms.Select(attrs={'class': 'form-control'}),\n            'related_invoice': forms.Select(attrs={'class': 'form-control'}),",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "UsedItemForm",
        "kind": 6,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "class UsedItemForm(forms.ModelForm):\n    class Meta:\n        model = UsedItem\n        fields = ['inventory_item', 'quantity_used', 'notes']\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        # Customize the queryset for inventory_item if needed\n        self.fields['inventory_item'].queryset = Inventory.objects.filter(item_quantity__gt=0)",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "PaymentServiceFormSet",
        "kind": 5,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "PaymentServiceFormSet = inlineformset_factory(\n    Payment, PaymentService,\n    form=PaymentServiceForm,\n    extra=1, can_delete=True\n)\n# Inline formset for PaymentInventory\nPaymentInventoryFormSet = inlineformset_factory(\n    Payment, PaymentInventory,\n    form=PaymentInventoryForm,\n    extra=1, can_delete=True",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "PaymentInventoryFormSet",
        "kind": 5,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "PaymentInventoryFormSet = inlineformset_factory(\n    Payment, PaymentInventory,\n    form=PaymentInventoryForm,\n    extra=1, can_delete=True\n)\n#class PaymentServiceForm(forms.ModelForm):\n  #  class Meta:\n       # model = PaymentService\n      #  fields = [ 'service', 'quantity']\n#class PaymentInventoryForm(forms.ModelForm):",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "OfferServiceFormSet",
        "kind": 5,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "OfferServiceFormSet = inlineformset_factory(\n    offers, OfferService, form=OfferServiceForm, extra=1, can_delete=True\n)\nOfferInventoryFormSet = inlineformset_factory(\n    offers, OfferInventory, form=OfferInventoryForm, extra=1, can_delete=True\n)\nclass FinanceForm(forms.ModelForm):\n    class Meta:\n        model = Finance\n        fields = ['transaction_type', 'amount', 'description', 'related_payment', 'related_invoice']",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "OfferInventoryFormSet",
        "kind": 5,
        "importPath": "webapp.forms",
        "description": "webapp.forms",
        "peekOfCode": "OfferInventoryFormSet = inlineformset_factory(\n    offers, OfferInventory, form=OfferInventoryForm, extra=1, can_delete=True\n)\nclass FinanceForm(forms.ModelForm):\n    class Meta:\n        model = Finance\n        fields = ['transaction_type', 'amount', 'description', 'related_payment', 'related_invoice']\n        widgets = {\n            'description': forms.Textarea(attrs={'rows': 3}),\n            'transaction_type': forms.Select(attrs={'class': 'form-control'}),",
        "detail": "webapp.forms",
        "documentation": {}
    },
    {
        "label": "patient",
        "kind": 6,
        "importPath": "webapp.models",
        "description": "webapp.models",
        "peekOfCode": "class patient(models.Model):\n    name = models.CharField(max_length=250)\n    phone = models.CharField(max_length=20)\n    country=models.CharField(max_length=40,default='none')\n    address = models.CharField(max_length=255, default='Default Address') \n    created_at = models.DateTimeField (auto_now_add = True)\n    date_of_birth = models.DateField(null=True, blank=True)\n    how_did_you_know_us=models.CharField(max_length=100,default='none')\n    def __str__(self):\n        return self.name  ",
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "Service",
        "kind": 6,
        "importPath": "webapp.models",
        "description": "webapp.models",
        "peekOfCode": "class Service(models.Model):\n    name = models.CharField(max_length=100)\n    price = models.DecimalField(max_digits=10, decimal_places=2)  # سعر الخدمة\n    def __str__(self):\n        return self.name        \nfrom django.db import models\nfrom django.utils import timezone\nclass Reserve(models.Model):\n    STATUS_CHOICES = [\n        ('completed', 'Completed'),",
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "Reserve",
        "kind": 6,
        "importPath": "webapp.models",
        "description": "webapp.models",
        "peekOfCode": "class Reserve(models.Model):\n    STATUS_CHOICES = [\n        ('completed', 'Completed'),\n        ('pending', 'Pending'),\n        ('cancelled', 'Cancelled'),\n    ]\n    BRANCH_CHOICES = [\n        ('EL_Mohandsen', 'EL_Mohandsen'),\n        ('5th_sattelment', '5th_sattelment'),\n        ('Naser_city', 'Naser_city'),",
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "ReservationService",
        "kind": 6,
        "importPath": "webapp.models",
        "description": "webapp.models",
        "peekOfCode": "class ReservationService(models.Model):\n    reserve = models.ForeignKey(Reserve, on_delete=models.CASCADE, related_name=\"reservation_services\")\n    service = models.ForeignKey(Service, on_delete=models.CASCADE)\n    def __str__(self):\n        return f\"{self.reserve} - {self.service}\"   \nclass Companies(models.Model):\n    company_name = models.CharField(max_length=255)\n    company_address = models.CharField(max_length=500)\n    company_phone = models.CharField(max_length=20)\n    def __str__(self):",
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "Companies",
        "kind": 6,
        "importPath": "webapp.models",
        "description": "webapp.models",
        "peekOfCode": "class Companies(models.Model):\n    company_name = models.CharField(max_length=255)\n    company_address = models.CharField(max_length=500)\n    company_phone = models.CharField(max_length=20)\n    def __str__(self):\n        return self.company_name\n    def get_total_due(self):\n        \"\"\"إجمالي المدفوعات المتبقية على الشركة\"\"\"\n        return self.total_due - self.total_paid\n    def get_inventory(self):",
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "Inventory",
        "kind": 6,
        "importPath": "webapp.models",
        "description": "webapp.models",
        "peekOfCode": "class Inventory(models.Model):\n    item_name = models.CharField(max_length=300)\n    item_quantity = models.IntegerField()  # الكمية الموجودة في المخزن\n    item_price = models.DecimalField(max_digits=10, decimal_places=2,default=0)\n    item_cost = models.DecimalField(max_digits=10, decimal_places=2)  # تكلفة المنتج\n    company_source = models.ForeignKey(Companies, on_delete=models.CASCADE, related_name='inventory_items')\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return self.item_name\n    def reduce_quantity(self, quantity):",
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "ReservationInventory",
        "kind": 6,
        "importPath": "webapp.models",
        "description": "webapp.models",
        "peekOfCode": "class ReservationInventory(models.Model):\n    reserve = models.ForeignKey(Reserve, on_delete=models.CASCADE, related_name=\"reservation_inventories\")\n    inventory = models.ForeignKey(Inventory, on_delete=models.CASCADE)\n    def __str__(self):\n        return f\"{self.reserve} - {self.inventory}\"      \nclass offers(models.Model):\n    name = models.CharField(max_length=250)\n    valid_from = models.DateTimeField()\n    valid_to = models.DateTimeField()\n    services = models.ManyToManyField(Service, through='OfferService')",
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "offers",
        "kind": 6,
        "importPath": "webapp.models",
        "description": "webapp.models",
        "peekOfCode": "class offers(models.Model):\n    name = models.CharField(max_length=250)\n    valid_from = models.DateTimeField()\n    valid_to = models.DateTimeField()\n    services = models.ManyToManyField(Service, through='OfferService')\n    inventory = models.ManyToManyField(Inventory, through='OfferInventory')\n    def is_active(self):\n        now = timezone.now()\n        return self.valid_from <= now <= self.valid_to\n    def __str__(self):",
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "OfferService",
        "kind": 6,
        "importPath": "webapp.models",
        "description": "webapp.models",
        "peekOfCode": "class OfferService(models.Model):\n    offer = models.ForeignKey(offers, on_delete=models.CASCADE)\n    service = models.ForeignKey(Service, on_delete=models.CASCADE)\n    discount_percentage = models.DecimalField(max_digits=5, decimal_places=2, null=True, blank=True)\n    discount_amount = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)\nclass OfferInventory(models.Model):\n    offer = models.ForeignKey(offers, on_delete=models.CASCADE)\n    inventory = models.ForeignKey(Inventory, on_delete=models.CASCADE)\n    discount_percentage = models.DecimalField(max_digits=5, decimal_places=2, null=True, blank=True)\n    discount_amount = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)",
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "OfferInventory",
        "kind": 6,
        "importPath": "webapp.models",
        "description": "webapp.models",
        "peekOfCode": "class OfferInventory(models.Model):\n    offer = models.ForeignKey(offers, on_delete=models.CASCADE)\n    inventory = models.ForeignKey(Inventory, on_delete=models.CASCADE)\n    discount_percentage = models.DecimalField(max_digits=5, decimal_places=2, null=True, blank=True)\n    discount_amount = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)\nclass Payment(models.Model):\n    STATUS_CHOICES = [\n        ('Paid', 'Paid'),\n        ('Pending', 'Pending'),\n        ('Cancelled', 'Cancelled'),",
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "Payment",
        "kind": 6,
        "importPath": "webapp.models",
        "description": "webapp.models",
        "peekOfCode": "class Payment(models.Model):\n    STATUS_CHOICES = [\n        ('Paid', 'Paid'),\n        ('Pending', 'Pending'),\n        ('Cancelled', 'Cancelled'),\n    ]\n    METHOD_CHOICES = [\n        ('INSTAPAY', 'INSTAPAY'),\n        ('CASH', 'CASH'),\n        ('CREDIT CARD', 'CREDIT CARD'),",
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "PaymentService",
        "kind": 6,
        "importPath": "webapp.models",
        "description": "webapp.models",
        "peekOfCode": "class PaymentService(models.Model):\n    payment = models.ForeignKey(Payment, on_delete=models.CASCADE)\n    service = models.ForeignKey(Service, on_delete=models.CASCADE)\n    quantity = models.PositiveIntegerField(default=1)\n    price_at_time_of_payment = models.DecimalField(max_digits=10, decimal_places=2, default=0)\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f\"{self.quantity} x {self.service.name} for {self.payment}\"\n    def save(self, *args, **kwargs):\n        # Save the service price as static data",
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "PaymentInventory",
        "kind": 6,
        "importPath": "webapp.models",
        "description": "webapp.models",
        "peekOfCode": "class PaymentInventory(models.Model):\n    payment = models.ForeignKey(Payment, on_delete=models.CASCADE)\n    inventory = models.ForeignKey(Inventory, on_delete=models.CASCADE)\n    quantity = models.PositiveIntegerField(default=1)\n    price_at_time_of_payment = models.DecimalField(max_digits=10, decimal_places=2, default=0)\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f\"{self.quantity} x {self.inventory.item_name} for {self.payment}\"\n    def save(self, *args, **kwargs):\n        # Save the inventory item price as static data",
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "Invoice",
        "kind": 6,
        "importPath": "webapp.models",
        "description": "webapp.models",
        "peekOfCode": "class Invoice(models.Model):\n    PAYMENT_METHODS = [\n        ('Cash', 'Cash Payment'),\n        ('Installments', 'Installment Payment'),\n    ]\n    company = models.ForeignKey(Companies, on_delete=models.CASCADE, related_name='invoices')\n    item = models.ForeignKey(Inventory, on_delete=models.CASCADE, related_name='invoices')\n    quantity_purchased = models.IntegerField()\n    quantity_used = models.IntegerField(default=0)\n    created_at = models.DateField(auto_now_add=True)",
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "Finance",
        "kind": 6,
        "importPath": "webapp.models",
        "description": "webapp.models",
        "peekOfCode": "class Finance(models.Model):\n    TRANSACTION_TYPE_CHOICES = [\n        ('Income', 'Income'),\n        ('Expense', 'Expense'),\n        ('Refund', 'Refund'),\n    ]\n    transaction_type = models.CharField(max_length=20, choices=TRANSACTION_TYPE_CHOICES)\n    amount = models.DecimalField(max_digits=15, decimal_places=2)  # المبلغ\n    description = models.TextField(null=True, blank=True)  # وصف المعاملة\n    related_payment = models.ForeignKey(Payment, on_delete=models.SET_NULL, null=True, blank=True, related_name='financial_transactions')",
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "Medical_History",
        "kind": 6,
        "importPath": "webapp.models",
        "description": "webapp.models",
        "peekOfCode": "class Medical_History(models.Model):\n    patient = models.ForeignKey(patient, on_delete=models.CASCADE)\n    medical_notes = models.CharField(max_length=1000)\n    created_at = models.DateField(auto_now_add=True)\n    def __str__(self):\n        return self.patient.name\nclass UserActivity(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    login_time = models.DateTimeField(null=True, blank=True)\n    logout_time = models.DateTimeField(null=True, blank=True)",
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "UserActivity",
        "kind": 6,
        "importPath": "webapp.models",
        "description": "webapp.models",
        "peekOfCode": "class UserActivity(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    login_time = models.DateTimeField(null=True, blank=True)\n    logout_time = models.DateTimeField(null=True, blank=True)\n    is_active = models.BooleanField(default=False)  # حالة المستخدم (نشط/غير نشط)\n    date = models.DateField(auto_now_add=True)  # تاريخ اليوم\n    def __str__(self):\n        return f\"{self.user.username} - {self.date}\"\nclass UsedItem(models.Model):\n    inventory_item = models.ForeignKey(Inventory, on_delete=models.CASCADE, related_name='used_items')",
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "UsedItem",
        "kind": 6,
        "importPath": "webapp.models",
        "description": "webapp.models",
        "peekOfCode": "class UsedItem(models.Model):\n    inventory_item = models.ForeignKey(Inventory, on_delete=models.CASCADE, related_name='used_items')\n    quantity_used = models.IntegerField()  # الكمية المستخدمة\n    date_used = models.DateTimeField(default=timezone.now)  # تاريخ الاستخدام\n    notes = models.TextField(blank=True, null=True)  # ملاحظات إضافية (اختياري)\n    def __str__(self):\n        return f\"{self.quantity_used} of {self.inventory_item.item_name} used on {self.date_used}\"\n    def save(self, *args, **kwargs):\n        # تقليل الكمية من المخزون عند حفظ العنصر المستخدم\n        self.inventory_item.reduce_quantity(self.quantity_used)",
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "ReservationTests",
        "kind": 6,
        "importPath": "webapp.tests",
        "description": "webapp.tests",
        "peekOfCode": "class ReservationTests(TestCase):\n    def setUp(self):\n        self.valid_data = {\n            'patient_name': 'John Doe',\n            'phone': '01234567890',\n            'type': 'old',\n            'date': timezone.now().date(),\n            'time': '10:00 AM',\n            'Branch': 'EL_Mohandsen',\n            'services': json.dumps(['BOTOX', 'FILLER']),",
        "detail": "webapp.tests",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "webapp.urls",
        "description": "webapp.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.index,name='home'),\n    path('register/', views.register, name='register'),\n    path('my-login', views.my_Login,name='login'),\n    path ('dashboard', views.dashboard, name='dashboard'),\n    path('logout/', views.my_Logout, name='logout'),\n    path('patients', views.patients,name='patients'),\n    path('Appointments',views.Appointments,name='Appointments'),\n    path('reservation/<int:pk>/', views.view_reservation, name='view_reservation'),\n    path('appointments-partial/', views.simple_appointments_partial, name='appointments_partial'),",
        "detail": "webapp.urls",
        "documentation": {}
    },
    {
        "label": "inde",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def index (request):\n    return render(request, 'web/index.html')\ndef register(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('login')  # Redirect to the login URL pattern after registration\n    else:\n        form = UserCreationForm()",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def register(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('login')  # Redirect to the login URL pattern after registration\n    else:\n        form = UserCreationForm()\n    context = {'form': form}\n    return render(request, 'web/register.html', context)",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "my_Login",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def my_Login(request):\n    if request.method == 'POST':\n        form = AuthenticationForm(request, data=request.POST)\n        if form.is_valid():\n            username = form.cleaned_data.get('username')\n            password = form.cleaned_data.get('password')\n            user = authenticate(request, username=username, password=password)\n            if user is not None:\n                login(request, user)\n                # تحديث أو إنشاء سجل النشاط",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "get_appointments_data",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def get_appointments_data(query=None):\n    \"\"\"تعالج بيانات الحجوزات وترجع context مناسب لعرضها مع دعم البحث الديناميكي.\"\"\"\n    today = date.today()\n    today_reservations = Reserve.objects.filter(date=today)\n    if query:\n        records = Reserve.objects.filter(\n            Q(patient_name__icontains=query) |\n            Q(phone__icontains=query)\n        ).prefetch_related(\n            Prefetch('reservation_services', queryset=ReservationService.objects.select_related('service'))",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "get_patients_data",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def get_patients_data(query=None):\n    \"\"\"تعالج بيانات المرضى وترجع قائمة مناسبة للعرض.\"\"\"\n    if query:\n        records = patient.objects.filter(\n            Q(name__icontains=query) |\n            Q(phone__icontains=query)\n        )\n    else:\n        records = patient.objects.all()\n    return {'records': records}",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "simple_patients_partial",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def simple_patients_partial(request):\n    query = request.GET.get('q')\n    context = get_patients_data(query)\n    return render(request, 'web/patients_partial.html', context)\ndef get_payments_data(query=None):\n    \"\"\"\n    تعالج بيانات Payment وترجع قائمة مناسبة للعرض.\n    إذا تم تمرير قيمة بحث (query)، يتم تصفية الفواتير بناءً على اسم المريض أو طريقة الدفع أو الحالة.\n    \"\"\"\n    if query:",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "get_payments_data",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def get_payments_data(query=None):\n    \"\"\"\n    تعالج بيانات Payment وترجع قائمة مناسبة للعرض.\n    إذا تم تمرير قيمة بحث (query)، يتم تصفية الفواتير بناءً على اسم المريض أو طريقة الدفع أو الحالة.\n    \"\"\"\n    if query:\n        payments = Payment.objects.filter(\n            Q(patient__icontains=query) |\n            Q(method__icontains=query) |\n            Q(status__icontains=query)",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "simple_payments_partial",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def simple_payments_partial(request):\n    query = request.GET.get('q', '')\n    context = get_payments_data(query=query)\n    return render(request, 'web/payments_partial.html', context)    \ndef get_analytics_data(request):\n    # استخراج الإطار الزمني المطلوب (افتراضي 'day')\n    time_frame = request.GET.get('time_frame', 'day').lower()\n    # بيانات اليوم\n    today = date.today()\n    recent_period = today - timedelta(days=14)  # آخر  أيام",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "get_analytics_data",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def get_analytics_data(request):\n    # استخراج الإطار الزمني المطلوب (افتراضي 'day')\n    time_frame = request.GET.get('time_frame', 'day').lower()\n    # بيانات اليوم\n    today = date.today()\n    recent_period = today - timedelta(days=14)  # آخر  أيام\n    todays_appointments = Reserve.objects.filter(date=today)\n    todays_payments = Payment.objects.filter(date=today)\n    todays_patients = patient.objects.filter(created_at__date=today)\n    total_appointments_today = todays_appointments.count()",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "analytics",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def analytics(request):\n    context = get_analytics_data(request)\n    return render(request, 'web/analytics_partial.html', context)\n@login_required(login_url='login')\ndef dashboard(request):\n    query = request.GET.get('q', '')\n    appointments_data = get_appointments_data(query=query)\n    # بالنسبة للمرضى، لا نمرر أي قيمة بحث حتى تظهر كل البيانات\n    patients_data = get_patients_data(query = query)\n    payments_data = get_payments_data(query=query)",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "dashboard",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def dashboard(request):\n    query = request.GET.get('q', '')\n    appointments_data = get_appointments_data(query=query)\n    # بالنسبة للمرضى، لا نمرر أي قيمة بحث حتى تظهر كل البيانات\n    patients_data = get_patients_data(query = query)\n    payments_data = get_payments_data(query=query)\n    analytics_data = get_analytics_data(request)\n    context = {\n        'appointments': appointments_data['records'],\n        'today_reservations': appointments_data['today_reservations'],",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "patient",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def patients (request):\n    records=patient.objects.all()\n    query = request.GET.get('q')  \n    if query:\n        records = patient.objects.filter(name__icontains=query) | patient.objects.filter(phone__icontains=query)\n    else:\n        records = patient.objects.all()\n    return render(request, 'web/patients.html', context={'records': records})\ndef edit_patient(request, record_id):\n    patient_record = get_object_or_404(patient, id=record_id)",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "edit_patient",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def edit_patient(request, record_id):\n    patient_record = get_object_or_404(patient, id=record_id)\n    if request.method == 'POST':\n        form = patient_form_edit(request.POST, instance=patient_record)\n        if form.is_valid():\n            form.save()\n            return redirect('patients')  \n    else:\n        form = patient_form_edit(instance=patient_record)\n    context = {",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "delete_patient",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def delete_patient(request, patient_id):\n    Patient = get_object_or_404(patient, id=patient_id)\n    if request.method == 'POST':\n        Patient.delete()\n        return redirect(reverse('patients'))  \n    return render(request, 'confirm_delete.html', {'patient': patient})\n@login_required(login_url='login')\ndef view_patient(request, record_id):\n    # الحصول على كائن المريض\n    patient_record = get_object_or_404(patient, id=record_id)",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "view_patient",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def view_patient(request, record_id):\n    # الحصول على كائن المريض\n    patient_record = get_object_or_404(patient, id=record_id)\n    # استرجاع السجلات المرتبطة\n    medical_history = Medical_History.objects.filter(patient=patient_record)\n    reservations = Reserve.objects.filter(patient_name=patient_record.name)\n    payments = Payment.objects.filter(patient=patient_record.name)\n    # إنشاء الفورمات\n    medical_history_form = MedicalHistoryForm(request.POST or None)\n    reserve_form = ReserveForm(request.POST or None)",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "add_patien",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def add_patient (request):\n    form= patient_form()\n    if request.method=='POST':\n        form=patient_form(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('patients')\n    else:\n        form = patient_form()   \n    context= {",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "Appointments",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def Appointments(request):\n    query = request.GET.get('q')  # البحث بناءً على الاسم أو الهاتف\n    today = date.today()\n    today_reservations = Reserve.objects.filter(date=today)\n    # جلب السجلات بناءً على البحث أو عرض كل السجلات\n    if query:\n        records = Reserve.objects.filter(\n            Q(patient_name__icontains=query) |  # البحث في اسم المريض\n            Q(phone__icontains=query)          # البحث في رقم الهاتف\n        ).prefetch_related(",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "simple_appointments_partial",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def simple_appointments_partial(request):\n    # جلب كل سجلات الحجوزات\n    appointments = Reserve.objects.all()\n    # تمرير السجلات إلى قالب الـ partial (appointments_partial.html)\n    return render(request, 'web/appointments_partial.html', {'appointments': appointments})\ndef view_reservation(request, pk):\n    \"\"\"عرض تفاصيل الحجز\"\"\"\n    reservation = get_object_or_404(Reserve, pk=pk)\n    # معالجة الوقت وعرضه بتنسيق 12 ساعة\n    if isinstance(reservation.time, str):  # إذا كان الوقت مخزن كـ CharField",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "view_reservation",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def view_reservation(request, pk):\n    \"\"\"عرض تفاصيل الحجز\"\"\"\n    reservation = get_object_or_404(Reserve, pk=pk)\n    # معالجة الوقت وعرضه بتنسيق 12 ساعة\n    if isinstance(reservation.time, str):  # إذا كان الوقت مخزن كـ CharField\n        try:\n            # إزالة أي أجزاء إضافية غير متوقعة\n            reservation.time = reservation.time.split(':')[0] + ':' + reservation.time.split(':')[1]\n            time_obj = datetime.strptime(reservation.time, '%H:%M').time()\n            reservation.formatted_time = time_obj.strftime('%I:%M %p')  # تنسيق 12 ساعة",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "edit_reservation",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def edit_reservation(request, pk):\n    \"\"\"تعديل الحجز الأساسي بدون التعامل مع الخدمات\"\"\"\n    reservation = get_object_or_404(Reserve, pk=pk)\n    if request.method == 'POST':\n        form = ReserveForm(request.POST, instance=reservation)\n        if form.is_valid():\n            form.save()  # حفظ بيانات الحجز فقط\n            return redirect('Appointments')\n    else:\n        form = ReserveForm(instance=reservation)",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "Schedule_Appointment",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def Schedule_Appointment(request, patient_id=None):\n    # If the patient_id is provided, pre-fill the name and phone number\n    if patient_id:\n        Patient = get_object_or_404(patient, id=patient_id)\n    else:\n        Patient = None\n    # Handle POST request\n    if request.method == 'POST':\n        form = ReserveForm(request.POST)\n        if form.is_valid():",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "update_appointment_status",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def update_appointment_status(request, appointment_id, status):\n    record = get_object_or_404(Reserve, id=appointment_id)\n    record.status = status\n    record.save()\n    # إذا كانت الحالة 'completed' وكان المريض غير موجود في قاعدة بيانات المرضى\n    if status == 'completed' and not patient.objects.filter(name=record.patient_name).exists():\n        patient.objects.create(\n            name=record.patient_name,\n            phone=record.phone,\n            address='Default Address',  # يمكنك تحديث هذا إذا كان لديك عنوان محدد",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "update_appointment_status_dashboard",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def update_appointment_status_dashboard(request, appointment_id, status):\n    record = get_object_or_404(Reserve, id=appointment_id)\n    record.status = status\n    record.save()\n    # إذا كانت الحالة 'completed' وكان المريض غير موجود في قاعدة بيانات المرضى\n    if status == 'completed' and not patient.objects.filter(name=record.patient_name).exists():\n        patient.objects.create(\n            name=record.patient_name,\n            phone=record.phone,\n            address='Default Address',  # يمكنك تحديث هذا إذا كان لديك عنوان محدد",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "my_Logout",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def my_Logout(request):\n    if request.user.is_authenticated:\n        # تحديث سجل النشاط\n        activity = UserActivity.objects.filter(user=request.user, date=timezone.now().date()).first()\n        if activity:\n            activity.logout_time = timezone.now()\n            activity.is_active = False\n            activity.save()\n    logout(request)\n    return redirect('login')",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "add_medical_history",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def add_medical_history(request):\n    if request.method == 'POST':\n        form = MedicalHistoryForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('patients')  # Redirect to medical history list after saving\n    else:\n        form = MedicalHistoryForm()\n    return render(request, 'web/add_medical_history.html', {'form': form})\n# Create Company",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "create_company",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def create_company(request):\n    if request.method == 'POST':\n        form = CompanyForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('companies')  # Redirect to company list after saving\n    else:\n        form = CompanyForm()\n    return render(request, 'web/add_company.html', {'form': form})\n# Create Service",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "create_service",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def create_service(request):\n    if request.method == 'POST':\n        form = ServiceForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('service_list')  # Redirect to service list after saving\n    else:\n        form = ServiceForm()\n    return render(request, 'create_service.html', {'form': form})\n #Create Payment",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "create_payment",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def create_payment(request,):\n    if request.method == 'POST':\n        # Initialize the forms with POST data\n        payment_form = PaymentForm(request.POST)\n        payment_service_formset = PaymentServiceFormSet(request.POST, prefix='services')\n        payment_inventory_formset = PaymentInventoryFormSet(request.POST, prefix='inventory')\n        # Check if all forms are valid\n        if payment_form.is_valid() and payment_service_formset.is_valid() and payment_inventory_formset.is_valid():\n            # Save the Payment instance\n            payment = payment_form.save()",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "get_service_price",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def get_service_price(request, service_id):\n    try:\n        service = Service.objects.get(id=service_id)\n        return JsonResponse({'price': service.price})\n    except Service.DoesNotExist:\n        return JsonResponse({'error': 'Service not found'}, status=404)\ndef get_inventory_price(request, inventory_id):\n    try:\n        inventory = Inventory.objects.get(id=inventory_id)\n        return JsonResponse({'price': inventory.item_price})",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "get_inventory_price",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def get_inventory_price(request, inventory_id):\n    try:\n        inventory = Inventory.objects.get(id=inventory_id)\n        return JsonResponse({'price': inventory.item_price})\n    except Inventory.DoesNotExist:\n        return JsonResponse({'error': 'Item not found'}, status=404)    \ndef create_payment_with_patient(request, reserve_id):\n    # Fetch the reservation object from the database\n    reservation = get_object_or_404(Reserve, id=reserve_id)\n    # Retrieve the patient's name from the reservation",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "create_payment_with_patient",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def create_payment_with_patient(request, reserve_id):\n    # Fetch the reservation object from the database\n    reservation = get_object_or_404(Reserve, id=reserve_id)\n    # Retrieve the patient's name from the reservation\n    payment_name = reservation.patient_name  # Adjust based on your model relationships\n    if request.method == 'POST':\n        # Initialize the forms with POST data\n        payment_form = PaymentForm(request.POST)\n        payment_service_formset = PaymentServiceFormSet(request.POST, prefix='services')\n        payment_inventory_formset = PaymentInventoryFormSet(request.POST, prefix='inventory')",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "payment_detail",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def payment_detail(request, payment_id):\n    # Retrieve the payment instance\n    payment = get_object_or_404(Payment, id=payment_id)\n    # Fetch related services and inventories\n    services = payment.paymentservice_set.all()\n    inventories = payment.paymentinventory_set.all()\n    return render(request, 'web/view_bill.html', {\n        'payment': payment,\n        'services': services,\n        'inventories': inventories,",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "edit_payment",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def edit_payment(request, payment_id):\n    payment = get_object_or_404(Payment, id=payment_id)\n    if request.method == 'POST':\n        payment_form = PaymentForm(request.POST, instance=payment)\n        payment_service_formset = PaymentServiceFormSet(request.POST, instance=payment, prefix='services')\n        payment_inventory_formset = PaymentInventoryFormSet(request.POST, instance=payment, prefix='inventory')\n        if payment_form.is_valid() and payment_service_formset.is_valid() and payment_inventory_formset.is_valid():\n            payment = payment_form.save()\n            # حفظ الخدمات\n            for service_form in payment_service_formset:",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "create_invoice",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def create_invoice(request):\n    if request.method == 'POST':\n        form = InvoiceForm(request.POST)\n        payment_method = request.POST.get('payment_method')  # الحصول على طريقة الدفع\n        if payment_method == 'Deferred':  # إذا كانت طريقة الدفع مؤجلة\n            due_dates = request.POST.get('due_dates')\n            payments = request.POST.get('payments')\n            # التحقق من أن المستخدم أدخل مواعيد المدفوعات والمبالغ\n            if not due_dates or not payments:\n                messages.error(request, \"Please provide due dates and payment amounts for deferred payment.\")",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "company_list",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def company_list(request):\n    companies = Companies.objects.all()\n    return render(request, 'web/Company_list.html', {'companies': companies})\n# List Inventory\ndef inventory_view(request, item_id=None):\n    # Handle search for inventory\n    inventory_query = request.GET.get('q')\n    if inventory_query:\n        inventory = Inventory.objects.filter(\n            Q(item_name__icontains=inventory_query) | Q(company_source__company_name__icontains=inventory_query)",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "inventory_view",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def inventory_view(request, item_id=None):\n    # Handle search for inventory\n    inventory_query = request.GET.get('q')\n    if inventory_query:\n        inventory = Inventory.objects.filter(\n            Q(item_name__icontains=inventory_query) | Q(company_source__company_name__icontains=inventory_query)\n        )\n    else:\n        inventory = Inventory.objects.all()\n    # Calculate inventory totals",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "update_inventory_item",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def update_inventory_item(request, item_id):\n    # جلب المنتج المحدد بناءً على item_id\n    inventory_item = get_object_or_404(Inventory, id=item_id)\n    # إذا كانت الطلبية POST، نريد تعديل المنتج\n    if request.method == 'POST':\n        form = InventoryForm(request.POST, instance=inventory_item)\n        if form.is_valid():\n            form.save()  # حفظ التعديلات\n            return redirect('inventory')  # إعادة توجيه إلى قائمة المخزون بعد التعديل\n    else:",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "delete_inventory_item",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def delete_inventory_item(request, item_id):\n    # جلب المنتج بناءً على item_id\n    inventory_item = get_object_or_404(Inventory, id=item_id)\n    # إذا كان الطلب POST، نقوم بحذف المنتج\n    if request.method == 'POST':\n        inventory_item.delete()  # حذف العنصر\n        return redirect('inventory')  # إعادة التوجيه إلى قائمة المخزون\n    # إذا كان الطلب GET، نعرض صفحة تأكيد الحذف\n    return render(request, 'web/delete_inventory_confirm.html', {'inventory_item': inventory_item})\n# List Services",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "payment_list",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def payment_list(request):\n    query = request.GET.get('q')  # Search value\n    branch_filter = request.GET.get('branch')  # Branch filter\n    start_date = request.GET.get('start_date')  # Start date filter\n    end_date = request.GET.get('end_date')  # End date filter\n    # Base query for payments\n    payments = Payment.objects.all()\n    # Filter payments by patient name if query exists\n    if query:\n        payments = payments.filter(Q(patient__icontains=query))",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "update_payment_status",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def update_payment_status(request, payment_id, new_status):\n    # جلب الفاتورة المطلوبة بناءً على الـ ID الخاص بها\n    payment = get_object_or_404(Payment, id=payment_id)\n    # التحقق من أن الحالة الجديدة هي واحدة من القيم المسموحة\n    if new_status in ['Paid', 'Cancelled']:\n        # تحديث حالة الفاتورة بالحالة الجديدة\n        payment.status = new_status\n        payment.save()  # حفظ التعديلات\n        return redirect('payment_list')  # إعادة التوجيه إلى صفحة عرض الفواتير\n    # إذا كانت الحالة غير مسموحة، يمكن عرض رسالة خطأ أو إعادة التوجيه",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "delete_payment",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def delete_payment(request, payment_id):\n    payment = get_object_or_404(Payment, id=payment_id)\n    payment.delete()\n    messages.success(request, f\"Payment {payment_id} has been deleted successfully.\")\n    return redirect('payment_list')  # إعادة التوجيه إلى قائمة الفواتير\ndef edit_payment(request, payment_id):\n    # جلب الفاتورة المطلوبة\n    payment = get_object_or_404(Payment, id=payment_id)\n    if request.method == 'POST':\n        # تعبئة البيانات المدخلة في الفورم",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "edit_payment",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def edit_payment(request, payment_id):\n    # جلب الفاتورة المطلوبة\n    payment = get_object_or_404(Payment, id=payment_id)\n    if request.method == 'POST':\n        # تعبئة البيانات المدخلة في الفورم\n        form = PaymentForm(request.POST, instance=payment)\n        if form.is_valid():\n            # حفظ التعديلات\n            form.save()\n            return redirect('payments')  # إعادة التوجيه إلى صفحة الفواتير بعد التعديل",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "invoice_list",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def invoice_list(request):\n    # Get the start and end dates from GET parameters if available\n    start_date = request.GET.get('start_date')\n    end_date = request.GET.get('end_date')\n    export_pdf = request.GET.get('export_pdf')\n    # Filter invoices based on date range if provided\n    if start_date and end_date:\n        invoices = Invoice.objects.filter(created_at__range=[start_date, end_date])\n    else:\n        invoices = Invoice.objects.all()",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "create_invoice",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def create_invoice(request):\n    if request.method == 'POST':\n        form = InvoiceForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('invoice_list')  # Redirect to invoice list after saving\n    else:\n        form = InvoiceForm()\n    return render(request, 'web/create_invoice.html', {'form': form})\ndef invoice_detail_view(request, id):",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "invoice_detail_view",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def invoice_detail_view(request, id):\n    \"\"\"\n    View to display invoice details and process payments.\n    \"\"\"\n    invoice = get_object_or_404(Invoice, id=id)\n    total_due = invoice.total_cost - invoice.total_paid\n    export_pdf = request.GET.get('export_pdf')\n    if request.method == 'POST':\n        payment_amount = request.POST.get('payment_amount')\n        if not payment_amount or Decimal(payment_amount) <= 0:",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "add_payment_view",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def add_payment_view(request, id):\n    invoice = get_object_or_404(Invoice, id=id)\n    if request.method == 'POST':\n        amount = request.POST.get('amount')\n        if amount:\n            try:\n                amount = Decimal(amount)  # تحويل المبلغ إلى decimal.Decimal\n                invoice.make_payment(amount)\n                messages.success(request, \"Payment has been added successfully!\")\n            except ValueError:",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "delete_invoice_view",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def delete_invoice_view(request, pk):\n    invoice = get_object_or_404(Invoice, pk=pk)\n    if request.method == 'POST':\n        invoice.delete()\n        messages.success(request, \"Invoice has been deleted successfully!\")\n        return redirect('invoice_list')\n    return render(request, 'confirm_delete.html', {'invoice': invoice})\n# List Medical History\ndef medical_history_list(request):\n    medical_histories = Medical_History.objects.all()",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "medical_history_list",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def medical_history_list(request):\n    medical_histories = Medical_History.objects.all()\n    return render(request, 'medical_history_list.html', {'medical_histories': medical_histories})\ndef get_service_price(request):\n    service_id = request.GET.get('service_id')\n    if service_id:\n        service = Service.objects.get(pk=service_id)\n        return JsonResponse({'price': service.price})\n    return JsonResponse({'price': 0})\ndef get_inventory_price(request):",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "get_service_price",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def get_service_price(request):\n    service_id = request.GET.get('service_id')\n    if service_id:\n        service = Service.objects.get(pk=service_id)\n        return JsonResponse({'price': service.price})\n    return JsonResponse({'price': 0})\ndef get_inventory_price(request):\n    inventory_id = request.GET.get('inventory_id')\n    if inventory_id:\n        inventory = Inventory.objects.get(pk=inventory_id)",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "get_inventory_price",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def get_inventory_price(request):\n    inventory_id = request.GET.get('inventory_id')\n    if inventory_id:\n        inventory = Inventory.objects.get(pk=inventory_id)\n        return JsonResponse({'price': inventory.item_price})\n    return JsonResponse({'price': 0})\n#HCM SYSTEM\ndef user_activity_view(request):\n    activities = UserActivity.objects.all()  # جلب جميع سجلات النشاط\n    return render(request, 'web/user_activity.html', {'activities': activities})",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "user_activity_view",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def user_activity_view(request):\n    activities = UserActivity.objects.all()  # جلب جميع سجلات النشاط\n    return render(request, 'web/user_activity.html', {'activities': activities})\ndef edit_company(request, company_id):\n    company = get_object_or_404(Companies, id=company_id)\n    if request.method == 'POST':\n        form = CompanyForm(request.POST, instance=company)\n        if form.is_valid():\n            form.save()\n            return redirect('company_detail', company_id=company.id)",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "edit_company",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def edit_company(request, company_id):\n    company = get_object_or_404(Companies, id=company_id)\n    if request.method == 'POST':\n        form = CompanyForm(request.POST, instance=company)\n        if form.is_valid():\n            form.save()\n            return redirect('company_detail', company_id=company.id)\n    else:\n        form = CompanyForm(instance=company)\n    return render(request, 'web/edit_company.html', {'form': form})",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "company_detail",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def company_detail(request, company_id):\n    company = get_object_or_404(Companies, id=company_id)\n    items = Inventory.objects.filter(company_source=company)\n    export_pdf = request.GET.get('export_pdf')\n    # Handle time frame filtering\n    start_date = request.GET.get('start_date')\n    end_date = request.GET.get('end_date')\n    invoices = Invoice.objects.filter(company=company)\n    if start_date and end_date:\n        try:",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "delete_company",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def delete_company(request, company_id):\n    Patient = get_object_or_404(Companies, id=company_id)\n    if request.method == 'POST':\n        Patient.delete()\n        return redirect(reverse('companies'))  \n    return render(request, 'confirm_delete.html', {'Companies': Companies})\ndef statistics_view(request):\n    start_date = request.GET.get('start_date')\n    end_date = request.GET.get('end_date')\n    # Ensure dates are parsed correctly if provided",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "statistics_view",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def statistics_view(request):\n    start_date = request.GET.get('start_date')\n    end_date = request.GET.get('end_date')\n    # Ensure dates are parsed correctly if provided\n    if start_date and end_date:\n        try:\n            start_date = datetime.strptime(start_date, '%Y-%m-%d')\n            end_date = datetime.strptime(end_date, '%Y-%m-%d')\n        except ValueError:\n            start_date = None",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "calendar_appointments",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def calendar_appointments(request):\n    # جلب جميع المواعيد من الموديل\n    appointments = Reserve.objects.all().select_related('name')  # لتضمين بيانات صاحب الموعد\n    # تحويل البيانات لتنسيق JSON المطلوب من FullCalendar\n    events = []\n    for appointment in appointments:\n        events.append({\n            'title': f\"{appointment.name.name} - {appointment.service}\",\n            'start': f\"{appointment.date}T{appointment.time}\",\n            'status': appointment.status,",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "service_list",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def service_list(request):\n    query = request.GET.get('q')  # الحصول على مصطلح البحث من الطلب (GET)\n    if query:\n        # تصفية الخدمات بناءً على مصطلح البحث\n        services = Service.objects.filter(name__icontains=query)  # البحث يكون غير حساس لحالة الأحرف\n    else:\n        services = Service.objects.all()\n    return render(request, 'web/inventory.html', {'services': services, 'query': query})\n# إضافة خدمة جديدة\ndef service_create(request):",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "service_create",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def service_create(request):\n    if request.method == 'POST':\n        form = ServiceForm(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Service has been added successfully!\")\n            return redirect('service_list')\n    else:\n        form = ServiceForm()\n    return render(request, 'web/add_service.html', {'form': form})",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "service_update",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def service_update(request, pk):\n    service = get_object_or_404(Service, pk=pk)\n    if request.method == 'POST':\n        form = ServiceForm(request.POST, instance=service)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Service has been updated successfully!\")\n            return redirect('service_list')\n    else:\n        form = ServiceForm(instance=service)",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "service_delete",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def service_delete(request, pk):\n    service = get_object_or_404(Service, pk=pk)\n    if request.method == 'POST':\n        service.delete()\n        messages.success(request, \"Service has been deleted successfully!\")\n        return redirect('service_list')\n    return render(request, 'web/service_list.html', {'service': service})\ndef branch(request):\n    return render(request, 'web/Branches.html')\ndef ElMohandseen_branch(request):",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "branch",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def branch(request):\n    return render(request, 'web/Branches.html')\ndef ElMohandseen_branch(request):\n    # Fetch selected date range from the user\n    start_date = request.GET.get('start_date')\n    end_date = request.GET.get('end_date')\n    export_pdf = request.GET.get('export_pdf')\n    # Convert strings to date objects\n    if start_date and end_date:\n        try:",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "ElMohandseen_branch",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def ElMohandseen_branch(request):\n    # Fetch selected date range from the user\n    start_date = request.GET.get('start_date')\n    end_date = request.GET.get('end_date')\n    export_pdf = request.GET.get('export_pdf')\n    # Convert strings to date objects\n    if start_date and end_date:\n        try:\n            start_date = datetime.strptime(start_date, '%Y-%m-%d')\n            end_date = datetime.strptime(end_date, '%Y-%m-%d')",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "fifeth_sattelmant_branch",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def fifeth_sattelmant_branch(request):\n    # Fetch selected date range from the user\n    start_date = request.GET.get('start_date')\n    end_date = request.GET.get('end_date')\n    export_pdf = request.GET.get('export_pdf')\n    # Convert strings to date objects\n    if start_date and end_date:\n        try:\n            start_date = datetime.strptime(start_date, '%Y-%m-%d')\n            end_date = datetime.strptime(end_date, '%Y-%m-%d')",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "naser_city_branch",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def naser_city_branch(request):\n    start_date = request.GET.get('start_date')\n    end_date = request.GET.get('end_date')\n    export_pdf = request.GET.get('export_pdf')\n    # Convert strings to date objects\n    if start_date and end_date:\n        try:\n            start_date = datetime.strptime(start_date, '%Y-%m-%d')\n            end_date = datetime.strptime(end_date, '%Y-%m-%d')\n            # Filter reservations, invoices, inventory usage, and service usage by date range",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "tasks",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def tasks(request):\n    today = date.today()\n    today_reservations = Reserve.objects.filter(date=today)\n    future_reservations = Reserve.objects.filter(date__gt=today)\n    # معالجة الوقت وعرضه بتنسيق 12 ساعة لكل حجز في today_reservations\n    for reservation in today_reservations:\n        if isinstance(reservation.time, str):  # إذا كان الوقت مخزن كـ CharField\n            try:\n                # إزالة أي أجزاء إضافية غير متوقعة\n                reservation.time = reservation.time.split(':')[0] + ':' + reservation.time.split(':')[1]",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "offer",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def offer(request):\n    offer = offers.objects.all()  # Get all existing offers\n    if request.method == 'POST':\n        offer_form = OfferForm(request.POST)\n        offer_service_forms = [OfferServiceForm(request.POST, prefix=f'service_{i}') for i in range(len(Service.objects.all()))]  # Adjust as needed\n        offer_inventory_forms = [OfferInventoryForm(request.POST, prefix=f'inventory_{i}') for i in range(len(Inventory.objects.all()))]  # Adjust as needed\n        if offer_form.is_valid():\n            new_offer = offer_form.save()  # Save the offer first\n            # Process OfferService forms\n            for service_form in offer_service_forms:",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "create_offer",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def create_offer(request):\n    \"\"\"\n    View for creating a new offer with associated services and inventory items.\n    \"\"\"\n    if request.method == \"POST\":\n        # Main offer form\n        offer_form = OfferForm(request.POST)\n        if offer_form.is_valid():\n            offer = offer_form.save(commit=False)  # Save the offer instance without committing\n            # Services and Inventory Formsets",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "offer_delete",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def offer_delete(request, pk):\n    offer = get_object_or_404(offers, pk=pk)\n    if request.method == 'POST':\n        offer.delete()\n        return redirect('offers_list')  # استبدل 'offers_list' باسم العرض المناسب\n    return render(request, 'offers/offer_confirm_delete.html', {'offer': offer})\ndef finance_list(request):\n    # Fetch all finances\n    finances = Finance.objects.all()\n    # Fetch selected date range from the user",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "finance_list",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def finance_list(request):\n    # Fetch all finances\n    finances = Finance.objects.all()\n    # Fetch selected date range from the user\n    start_date = request.GET.get('start_date')\n    end_date = request.GET.get('end_date')\n    export_pdf = request.GET.get('export_pdf')\n    # Filter finances by date range\n    if start_date and end_date:\n        finances = finances.filter(",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "add_finance",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def add_finance(request):\n    if request.method == 'POST':\n        form = FinanceForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('finance_list')\n    else:\n        form = FinanceForm()\n    return render(request, 'finance/add_finance.html', {'form': form})\ndef register_used_item(request):",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "register_used_item",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def register_used_item(request):\n    if request.method == 'POST':\n        form = UsedItemForm(request.POST)\n        if form.is_valid():\n            used_item = form.save(commit=False)\n            # Ensure the quantity used does not exceed the available quantity\n            if used_item.quantity_used > used_item.inventory_item.item_quantity:\n                messages.error(request, \"The quantity used exceeds the available stock.\")\n            else:\n                used_item.save()",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "edit_used_item",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def edit_used_item(request, item_id):\n    used_item = get_object_or_404(UsedItem, id=item_id)\n    if request.method == 'POST':\n        form = UsedItemForm(request.POST, instance=used_item)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Used item updated successfully!\")\n            return redirect('register_used_item')\n    else:\n        form = UsedItemForm(instance=used_item)",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "delete_used_item",
        "kind": 2,
        "importPath": "webapp.views",
        "description": "webapp.views",
        "peekOfCode": "def delete_used_item(request, item_id):\n    used_item = get_object_or_404(UsedItem, id=item_id)\n    if request.method == 'POST':\n        used_item.delete()\n        messages.success(request, \"Used item deleted successfully!\")\n    return redirect('register_used_item')",
        "detail": "webapp.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'main_crm.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]